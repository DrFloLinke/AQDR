[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"Welcome Analysing Quantitative Data R! purpose module introduce key components statistical programming language R demonstrate commonly used methods can applied preprocess analyse quantitative data.module divided four parts. Please work part time, ensure complete exercises end chapter.queries, please contact F.Reiche@warwick.ac.uk","code":""},{"path":"accessibility.html","id":"accessibility","chapter":"Accessibility","heading":"Accessibility","text":"companion uses font “Lexend”. Lexend fonts intended reduce visual stress improve reading performance. Initially designed dyslexia struggling readers mind, Bonnie Shaver-Troup, creator Lexend project, soon found fonts also great everyone else.companion also uses dark mode theme. many users, including neurodivergent individuals, dark mode can reduce eye strain enhance focus minimising visual overstimulation.","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"section provides basic overview R programming language instructions set R RStudio computer.","code":""},{"path":"introduction.html","id":"what-is-r-and-why-should-i-learn-it","chapter":"1 Introduction","heading":"What is R and why should I learn it?","text":"R open-source statistical programming language used data processing, analysis visualization. released 1993 University Auckland based older S programming language. Since , grown one popular languages quantitative data analysis across multiple disciplines.many reasons learning R worth time:1. ’s open-source - opposed popular statistical packages SPSS, Stata SAS, R open-source tool. means using R public libraries completely free charge requires special licences. maintained user community, thus improvements directly coincide requirements end-users, rather profit-driven considerations often guiding introduction new functionalities proprietary statistical packages.2. can widely applied - since ’s developed users, tools R almost everything, simple data manipulation visualization automated web data collection, natural language processing, survey data analysis, epidemiology, computational biology, social network analysis, cognitive modelling, geospatial analysis, deep learning many .3. widely applied - 2019, R 5th popular tool data science mentioned job advertisements indeed.com. widely used variety industries, including tech, consulting, think-tanks public institutions.4. abundance resources available -line - due increase popularity recent years, multiple R courses available -line, help master usage particular techniques libraries practical exercises. considerable size community emerged surrounding language throughout recent decades means almost problems face different levels advancement R programming likely encountered others past. result, Google tremendous resource troubleshooting, debugging deepening understanding ins outs R programming. Examples useful MOOC course websites include DataCamp, Coursera Edex.5. programming language analysing data. may sound like cliché, ubiquity data transforming almost every area life nowadays. Therefore data literacy understanding key programming concepts extremely useful , never know may need future. Majority concepts covered course large extent transferable commonly used languages data analysis tools. high level technical data analysis skills one desirable skills according employers - fact largely overlooked many prospective job seekers:","code":""},{"path":"introduction.html","id":"the-course-structure","chapter":"1 Introduction","heading":"The course structure","text":"course divided four parts. first one introduce R, covering basic concepts related different data structures, simple tools analysis core programming concepts. second part extends application specialist R libraries used data manipulation visualization. Part 3 covers key statistical analysis techniques, correlation linear regression discusses can applied R. Finally, part 4 devoted advanced topics.chapter consists content part, discussing new R tools techniques examples, followed summary, includes list functions used chapter along short explanations finally set practical _exrcises solutions. material presented chapter - R Script, Markdown file, exercises data - available downloaded top chapter page. Throughout chapter’s content, R code always presented “chunks” followed output produce, can see image . Note can always use button top right corner copy content chunk clipboard paste R session.remainder chapter, go process setting necessary tools personal computer.","code":""},{"path":"introduction.html","id":"setup","chapter":"1 Introduction","heading":"Setup","text":"get started R, ’ll need download two things: R language R Studio IDE (Integrated Development Environment). can get first one CRAN following appropriate installation link operating system top page. install R, go RStudio website download install R Studio.Now done installation, ready start using R - can clicking RStudio shortcut. opening application, couple things useful set . First, open “Tools” tab top window select “Global Options”. , “General tab” uncheck “restore .RData workspace startup” set “Save workspace .RData exit” “Never”. ensure R session always starts clean, without objects loaded previous time used . , “Code” section, check option “Soft-wrap R Source file”. Finally “Appearance” section select editor theme choice, well appropriate font size zoom. Click Apply OK done.","code":""},{"path":"introduction.html","id":"layout","chapter":"1 Introduction","heading":"Layout","text":"R Studio editor consists R main panes - “Source”, “Console”, “Environment/History/…”, “Files/Plots/Packages/…”. can adjust location hide pane button, located right side navigation bar.","code":""},{"path":"introduction.html","id":"console-pane","chapter":"1 Introduction","heading":"Console pane","text":"console output generated R (except plots) goes. can also enter R Studio function calls produce output. Give try type print(\"Hello world!\") command line.can also try entering simple mathematical calculations 2+2 see R works perfectly calculator. Note rarely enter longer pieces code console. ensure reproducibility work, code always executed saved R Scripts.","code":"\nprint(\"Hello world!\")[1] \"Hello world!\""},{"path":"introduction.html","id":"source-pane","chapter":"1 Introduction","heading":"Source pane","text":"source pane contains R Scripts - essentially text files save longer pieces R code can execute sequentially. can open new R-Script clicking icon top left corner pressing Ctrl + Shift + N Windows (Command + Shift + N Macbooks). can save R script clicking floppy disk icon top R script pressing Ctrl + S (Command + S). Please save file name hello.R. Make sure create separate folder r_course store files related lessons. can type print(\"Hello world!\") function call console execute selecting line pressing Ctrl + Enter (Command + Enter) pressing small icon top right corner. Generally, can execute longer pieces code first selecting entire chunk using cursor pressing appropriate execution keyboard shortcut clicking execution button. can also comment code using # hashtag. Everything following # interpreted R code, therefore can write anything want begin new line pressing Enter. Generally, ’s crucial comment code, come back scripts half year, likely remember everything. rather keeping print(\"Hello world!\") first R script, type:","code":"\nprint(\"Hello world!\") #this function prints it input to the console"},{"path":"introduction.html","id":"a-short-note-on-reproducibility","chapter":"1 Introduction","heading":"A short note on reproducibility","text":"vital essential code work course future cases R usage stored R scripts rather executed directly console. ideal R project consist file containing data used format collected (case primary data) provided (case secondary data) R script(s) used analysis appropriate comments made step, including data preprocessing, visualization statistical analyses run part project. way, anyone wants reproduce analysis (including year) can simply open script, “press play” get results , well trace back steps decisions made arrive results. crucial academia, allows supervisor/reviewer ensure methodological correctness work, important step tackling replication crisis haunting many academic disciplines. also important business setting, allows co-workers understand work, find possible errors re-use necessary, rather looking black box producing output potentially questionable quality.Essential code refers anything needed reproduce analysis. examples non-essential operations may still execute console include getting overview data (example printing variable names, number records, variable types producing simple plot going include final work) well looking function documentation described . However, course, ’s recommended keep code use R scripts. allow come back lesson review tools learned throughout course. Every section provide R script code uses order top page. also include R markdown file (.Rmd) content. Rmarkdown special format used produce documents formats HTML, pdf Docx mixing text R code - learn R Markdown section end course.","code":""},{"path":"introduction.html","id":"environment-pane","chapter":"1 Introduction","heading":"Environment pane","text":"third tab provides list R Environments. important idea R, irrelevant course. advanced readers, Hadley Wickham’s Advanced R provides good overview concept. course, work R’s Global Environment. objects assign R stored displayed. example, printed output 2 + 2 R console. However, can also store output object (almost) arbitrary name, say x, using <- assignment operator. output normally stored console instead passed object left. can type x script execute type x console press enter see value stored x, seen .Note x appeared environment pane Values section. Similarly, can create function, typing:, function foo appear environment appropriate label. learn assignment functions R Programming Basics Key Programming Concepts. , important takeout point “Environment” tab allows see objects defined R, along key properties.","code":"\nx <- 2 + 2\nx[1] 4\nfoo <- function() 2 + 2"},{"path":"introduction.html","id":"a-short-note-on-keeping-your-working-environment-clean","chapter":"1 Introduction","heading":"A short note on keeping your working environment clean","text":"working R project, ’s important always start clean environment. Especially start receiving error trace back easily, best first step often clean run session run script run line carefully examining output. clean working environment, simply restart R Studio session, either selecting “Restart R” option “Session” tab top window pressing Ctrl + Shift + F10 (Command + Shift + F10). Note cause lose everything stored environment. yet another reason put code script - result, even restart session, able reproduce everything previously present Global Environment.","code":""},{"path":"introduction.html","id":"filesplothelp-pane","chapter":"1 Introduction","heading":"Files/plot/help … pane","text":"last pane contains file browser, plot viewer documentation. learn plotting data chapters Exploratory analysis Data visualization. importantly, section also can view help coming R documentation. Every function R offline documentation file associated can access using R Studio. simply type help(functionname) question mark ? followed function name. Give try typing ?sum R console pressing enter - able see help sum function. documentation extremely useful working R. content may seem bit technical first, learn R, lot things become clearer, making easier learn understand new functionalities. Furthermore, usually provides reproducible examples R function’s usage (need scroll bottom documentation find ), allow understand context can function used. example, sum function documentation, can see:Give try hello.R R script - see sum function behaving exactly expected.","code":"\n## Pass several numbers to sum, and it also adds the elements.\nsum(1, 2, 3, 4, 5)"},{"path":"introduction.html","id":"a-short-note-on-finding-help-when-working-with-r","chapter":"1 Introduction","heading":"A short note on finding help when working with R","text":"built-documentation useful, sometimes may run trouble ’s difficult work . simplest solution concisely describe problem (copy error message receiving) Google . Usually, first result show come StackOverflow. StackOverflow Q & website focused programming languages, extensive section solely R (almost 350 000 questions time course creation). example, can try typing \"\" + 5 console. resulting error message Error \"\" + 5 : non-numeric argument binary operator rather complicated, might put many first-time users . However, quick Google search lead Stack Overflow post, explains binary operation calculation takes two values (operands) produces another value (…) see error message, means (function ’re calling ) trying perform binary operation something isn’t number. Note ’s good make sure question answered previously (case 99 100 times) posting new one. decide post question, make sure follow Stack Overflow guidelines, well make example reproducible, described post.","code":""},{"path":"basics.html","id":"basics","chapter":"2 Basics of R Programming","heading":"2 Basics of R Programming","text":"","code":""},{"path":"basics.html","id":"content","chapter":"2 Basics of R Programming","heading":"2.1 Content","text":"","code":""},{"path":"basics.html","id":"arithmetic-operations-and-assignment","chapter":"2 Basics of R Programming","heading":"Arithmetic operations and assignment","text":"R allows perform every basic mathematical operation, can simply used calculator. , can see several examples.operations performed generate output, printed R console. time, however, useful store outputs operations perform, can accessed repeatedly. , can store values variables, can viewed manipulated referencing names. Values assigned variables using <-operator. = may seem equivalent, advanced reasons <- used whenever assigning value. ’re interested technical details behind , can check Stack Overflow post.can name variable anything like, however :start numberstart numberhave whitespaces1have whitespaces1include mathemtical operators ’s name, *, /, ^, %, etc. - ’s best avoid special characters except “” “.” separate words necessary, example my_variable .variable. can see dot used variable names many users, technically using  better practice, dot additional special meaning attached .include mathemtical operators ’s name, *, /, ^, %, etc. - ’s best avoid special characters except “” “.” separate words necessary, example my_variable .variable. can see dot used variable names many users, technically using  better practice, dot additional special meaning attached .also useful avoid naming variables using names already defined R something else - however, learn avoid progress course.Keep mind, variable names arbitrary, ’s good keep concise informative, especially present code someone come back work long period time.Assigning values produce output. access values assigned variable, call name directly script console. can use perform mathematical operations objects well.Finally, can always assign new value name. However implies old value discarded. can useful know won’t need access value . example, ’s common practice modify variable already defined x <- x + 5. simply means “add 5 x store x”.","code":"\n5 + 3 #addition[1] 8\n5 - 3 #subtraction[1] 2\n5 / 3 #division[1] 1.666667\n5 / 0[1] Inf\n5 * 3 #multiplication[1] 15\n5 ^ 3 #exponentiation[1] 125\nsqrt(4) #square root[1] 2\n(5 + 5) / (3 + 1) #parenthesis[1] 2.5\n9 %% 2 #modulo[1] 1\n9 %/% 2 #integer division[1] 4\nlog(2) #natural logarithim[1] 0.6931472\nexp(2) #exponent[1] 7.389056\nx <- 5\nmy_number <- 4.2\nresult <- 5 + 6 * 7 - 8\nx <- 5\ny <- 7\nx[1] 5\ny[1] 7\nx + y[1] 12\nz <- x * y\nz[1] 35\nx <- 5\nx[1] 5\nx <- 7\nx[1] 7\nx <- x + 2"},{"path":"basics.html","id":"vectors","chapter":"2 Basics of R Programming","heading":"Vectors","text":"operations useful, true power R comes -called vectorization mathematical () operations. vector R terminology just fancy word ordered sequence numbers “column” Excel sheet. Vectors also commonly referred variables - context course, terms used interchangably. Vectors created combine function c(). function simply expression followed parentheses takes values input generates values output. Vectors assigned names way numbers. fact, number R equivalent vector length 1. can see examples vectors created.R also offers shorthand creating sequences integers two values, example:also possible create multiple repetitions given vector using rep() function, takes vector first argument number required repetitions second argument.length vector refers number elements contains. can examined using length() function:Vectorization operation refers fact operation performed vectors element-wise. true majority R operations. example, adding vectors [1 2 3] [5 6 7] produce vector [6 8 10]. operation performed vector single number (scalar, using specific terminology), applied pair elements, [1 1 1] multiplied 2 yield [2 2 2]. can see examples vectors action.case performing operations vector scalar (one number), operation applied element vector. example:mentioned earlier vectors can thought ordered sequences numbers, can also contain text. vectors callled “character vectors” constructed similarily numeric vectors. text enquoted “” denote interpreted variable name function.Mathematical operations addition division performed character vectors obvious reasons produce error attempt . However, can combine words numbers one vector - however, treated text, number 5 example gets converted character “5”.paste function useful dealing character vectors - can thought equivalent addition operation text.","code":"\nx <- c(1, 4, 5, 6)\nx[1] 1 4 5 6\nz <- c(5 / 2, 7 * 8, 2 + 1)\nz[1]  2.5 56.0  3.0\nv <- c(x, z)\nv[1]  1.0  4.0  5.0  6.0  2.5 56.0  3.0\n1:10 [1]  1  2  3  4  5  6  7  8  9 10\nx <- 15:5\nx [1] 15 14 13 12 11 10  9  8  7  6  5\nrep(5, 3) #repreat the number 5 3 times[1] 5 5 5\na <- c(5, 6, 7)\nb <- rep(a, 4) #repeat vector a 4 times and assign it to b\nb [1] 5 6 7 5 6 7 5 6 7 5 6 7\na <- 1:5\nlength(a)[1] 5\nx <- c(1, 2, 3, 2)\ny <- c(5, 6, 7, 4)\nx + y[1]  6  8 10  6\nx - y[1] -4 -4 -4 -2\nx ^ y[1]    1   64 2187   16\nz <- 5 * x - 2 * y\nz[1] -5 -2  1  2\nx <- c(1, 2, 3, 2)\nx * 3[1] 3 6 9 6\na <- \"Hello world\"\na[1] \"Hello world\"\nwords <- c(\"This\", \"Is\", \"A\", \"Sequence\", \"Of\", \"Words\")\nwords[1] \"This\"     \"Is\"       \"A\"        \"Sequence\" \"Of\"       \"Words\"   \nmixed <- c(5, \"something\", \"something else\")\nmixed[1] \"5\"              \"something\"      \"something else\"\nname <- \"John\"\nsurname <- \"Doe\"\npaste(name, surname)[1] \"John Doe\"\nnames <- c(\"John\",\"Jane\",\"Thomas\")\nsurnames <- c(\"Doe\",\"Smith\",\"Kowalsky\")\npaste(names, surnames)[1] \"John Doe\"        \"Jane Smith\"      \"Thomas Kowalsky\""},{"path":"basics.html","id":"coercion","chapter":"2 Basics of R Programming","heading":"Coercion","text":"Another important topic dealing vectors coerecion. refers forcing one vector type become another using functions. example, use .character force R object character vector, .numeric force numeric vector:Note always work, many cases elements one vector type interpreted another. example:case, R still returns output, however third element nums vector turned NA value. NA shorthand Available - ’s constant R uses deal missing values. indicated warning printed R console. Missing values covered detail next chapter.","code":"\nnumbers_char <- c(\"5\",\"6\",\"7\")\nnumbers_char[1] \"5\" \"6\" \"7\"\nnumbers <- as.numeric(numbers_char)\nnumbers[1] 5 6 7\nnumbers <- c(10, 123, 12)\nas.character(numbers)[1] \"10\"  \"123\" \"12\" \nnums <- c(\"1\",\"2\",\"three\")\nas.numeric(nums)Warning: NAs introduced by coercion[1]  1  2 NA"},{"path":"basics.html","id":"logical-values-and-operators","chapter":"2 Basics of R Programming","heading":"Logical Values and Operators","text":"Another crucial type operations R logical operations, also known boolean. used evaluate truth value logical statements variable “equal variable B” variable numeric vector. Whenever queried statement True, return TRUE FALSE otherwise. can see simple examples using equality operator == - double equality means checking whether two values equal, rather assigning one another.! operator used negation, !TRUE results FALSE vice versa. Accordingly, != used denote ‘equals ’.Logical operations can also used compare values, using < b “less b”, <= b “less equal b” vice versa.Finally, & (logical “”) | (logical “”) operators designed combine TRUE/FALSE values. , put & two logical values, yield TRUE values TRUE. | hand return TRUE values TRUEThe logical values also often used verify whether dealing certain R type - example check whether value character numeric. achieved using functions, .numeric .character.numbers characters, logical values also form special types vectors can used perform element-wise operations.can also used find whether value numeric character vector equal another.boolean vectors can also thought special case numeric vectors consisting 0s 1s, 0 corresponds FALSE 1 TRUE value. can easily seen example :","code":"\na <- 5\na == 5[1] TRUE\na == 3[1] FALSE\na - 2 == 3[1] TRUE\n\"John\" == \"James\"[1] FALSE\n!TRUE[1] FALSE\n!FALSE[1] TRUE\n5 != 6[1] TRUE\n\"John\" != \"James\"[1] TRUE\nx <- 5\ny <- 3\n\nx > y[1] TRUE\nx - 2 < y[1] FALSE\nx - 2 <= y[1] TRUE\nTRUE & TRUE[1] TRUE\nTRUE & FALSE[1] FALSE\nTRUE | FALSE[1] TRUE\nFALSE | FALSE[1] FALSE\n(5 + 1 == 6) | (2 + 2 == 5)[1] TRUE\n(5 + 1 == 6) & (2 * 2 == 10)[1] FALSE\nnumbers <- c(5, 6, 7)\nis.vector(numbers)[1] TRUE\nis.numeric(numbers)[1] TRUE\nis.character(numbers)[1] FALSE\nwords <- c(\"Word\",\"Word\")\nis.numeric(words)[1] FALSE\nis.character(words)[1] TRUE\na <- c(TRUE, FALSE, FALSE)\nb <- c(TRUE, TRUE, TRUE)\na & b[1]  TRUE FALSE FALSE\nx <- c(5, 6, 7, 8)\nx == 5[1]  TRUE FALSE FALSE FALSE\ny <- c(\"John\", \"James\", \"Thomas\")\nz <- c(\"John\",\"James\",\"Robert\")\nz == y[1]  TRUE  TRUE FALSE\nTRUE + TRUE + TRUE[1] 3"},{"path":"basics.html","id":"indexing","chapter":"2 Basics of R Programming","heading":"Indexing","text":"large volume data can stored one vector, often may want access specific element , fraction elements. index vector, simply integer corresponding position value vector. , vector N values integers ranging 1 N. example, vector c(5, 10, 3, 2), index 5 1, index 10 2, index 3 3, etc. Indexing operation accessing vector’s elemet given index, using square brackets []. example, [5] means “get fifth element vector ”.Indexing can also used replace values given position vector. example , replace first element number 1000.Indexing can also done using another vector numeric values. example may want get first, second fifth elements given vector, sequence elements 1 4.Indexing even powerful conjunction logical operations. , logical vector can used index vector - indexing operations returns values indexed vector corresponding indexing logical vector TRUE. may sound confusing first, actually quite straightforward, seen :example, imagine vector gdp vector holds GDP per capita values list countries country vector holds corresponding country names. Logical indexing may useful, want get names countries GDP per capita certain value:can also use multiple critertia, example index countries GDP higher 40000 USD UN Human Development Index higher 0.9.","code":"\na <- c(5.2, 4.5, 6.2, 8.9, 10.2, 4.8, 0.1)\na[5][1] 10.2\na[1] <- 1000\na [1] 1000.0    4.5    6.2    8.9   10.2    4.8    0.1\na <- c(5.2, 4.5, 6.2, 8.9, 10.2, 4.8, 0.1)\na[c(1, 3, 5)][1]  5.2  6.2 10.2\n#equivalent to:\nb <- c(1, 3, 5)\na[b][1]  5.2  6.2 10.2\n#can also be done for a sequence\na[1:5][1]  5.2  4.5  6.2  8.9 10.2\nx <- c(4.2, 5.6, 7.2, 1.1)\nindex <- c(FALSE, TRUE, TRUE, FALSE) #only second and third elements are TRUE\nx[index] #returns only second and third elements of the x vector[1] 5.6 7.2\ngdp <- c(69687, 67037, 65111, 52367, 41030, 32946, 29961)\ncountries <- c(\"Qatar\", \"Iceland\", \"USA\",\n               \"Germany\", \"United Kingdom\", \"Italy\", \"Spain\")\ncountries[gdp > 40000][1] \"Qatar\"          \"Iceland\"        \"USA\"            \"Germany\"        \"United Kingdom\"\nhdi <- c(0.848, 0.938, 0.920, 0.939, 0.920, 0.883, 0.893)\ncountries[gdp > 40000 & hdi > 0.9][1] \"Iceland\"        \"USA\"            \"Germany\"        \"United Kingdom\""},{"path":"basics.html","id":"sorting","chapter":"2 Basics of R Programming","heading":"Sorting","text":"many occasions, ’s useful sort vector see ’s highest lowest values. can achieved using sort function.default, R sorts vectors increasing order (case character vectors, translates -Z sorting). However, sort function additional argument, decreasing, can used specify whether sorting done decreasing order. argument default argument, .e. takes certain value unless specified otherwise user. common R lot functions allow customizing way work specifying additional arguments, default value avoid effort specifying every time certain function used. default arguments can easily recognized R documentation. case sort, Usage section reads sort(x, decreasing = FALSE, ...). means, function takes x (vector sorted) main argument, decreasing, defaults FALSE. argument decreasing also logical - can take TRUE FALSE values - common argument type certain operation can performed two different ways additional element may always desired.sorting vector may useful certain circumstances, lot time may actually need sort values another vector. example, let’s assume vector names corresponding ages, want see names ordered age.can achieved using order function, returns indices vector needed re-arrange sorted order.case, age 10 (index 2) go first place, 15 (index 4) second position, 20 (index 3) third, etc. Note two following operations equivalent:first one tells R simply sort values age, whereas second index age indices age sorted order. get names sorted age, can use:Finally, rank function returns sample ranks given vector, .e. relative position sorted list. Note different order. rank returns position corresponding value sorted order, whereas order returns indices original vector needed put sorted order.example, first value vector returned rank(age) 5, since first value age vector 50, last numeric order. first value vector returned order(age) 2 - , 2nd element age (.e. value 10) go first position vector correctly ordered.Finally, logical indices can converted numerical values using function. takes logical vector input returns indices value vector TRUE. can see example :function helpful certain situations, however ’s bad practice apply cases logical indexing sufficient, example:sufficient, ’s need use:One situations use function can preferred simple logical indexing vector contains missing values (discussed next chapter. example, first expression return NA., running logical comparisons numbers > 5 always returns missing values, along TRUE FALSE logical values. make sense, since NA comparable number.skips NA values, returning indices values TRUE.result, can perform indexing variable missing values using :Two cousins function .max .min, return index highest lowest value vector. , coming back ages example, can retrieve name person highest lowest age using respectively:","code":"\nnumbers <- c(8, 4, 5, 10, 2, 123)\nsort(numbers)[1]   2   4   5   8  10 123\nsort(numbers, decreasing = TRUE)[1] 123  10   8   5   4   2\nnames <- c(\"Thomas\",\"Peter\",\"Ahmed\",\"Emily\",\"Helena\")\nage <- c(50, 10, 20, 15, 40)\norder(age)[1] 2 4 3 5 1\nsort(age)[1] 10 15 20 40 50\nage[order(age)][1] 10 15 20 40 50\nnames[order(age)][1] \"Peter\"  \"Emily\"  \"Ahmed\"  \"Helena\" \"Thomas\"\nnames[order(age, decreasing = TRUE)] #decreasing order[1] \"Thomas\" \"Helena\" \"Ahmed\"  \"Emily\"  \"Peter\" \nage[1] 50 10 20 15 40\nrank(age)[1] 5 1 3 2 4\norder(age)[1] 2 4 3 5 1\nnumbers <- 1:10\nnumbers > 5 [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\nwhich(numbers > 5)[1]  6  7  8  9 10\nnumbers[numbers > 5][1]  6  7  8  9 10\nnumbers[which(numbers > 5)][1]  6  7  8  9 10\nnumbers <- c(2, 4, 1, 10, 20, NA)\nnumbers[numbers > 5][1] 10 20 NA\nnumbers > 5[1] FALSE FALSE FALSE  TRUE  TRUE    NA\nwhich(numbers > 5)[1] 4 5\nnumbers[which(numbers > 5)][1] 10 20\nnames[which.max(age)][1] \"Thomas\"\nnames[which.min(age)][1] \"Peter\""},{"path":"basics.html","id":"summary","chapter":"2 Basics of R Programming","heading":"2.2 Summary","text":"Vectors simply ordered sequences elements represent concept analyze - example, can vector country names vector corresponding GDP per capita amounts. also known variables.Vectors simply ordered sequences elements represent concept analyze - example, can vector country names vector corresponding GDP per capita amounts. also known variables.Vectorization simply means, add (perform operation) two vectors toegether/numeric element vector, done element-wise.Vectorization simply means, add (perform operation) two vectors toegether/numeric element vector, done element-wise.Functions R objects take values inputs produce values outputs.Functions R objects take values inputs produce values outputs.Logical values result comparing vectors using logical operators (==, <, >). can either TRUE logical statment true (e.g. 2 + 2 == 4) FALSE otherwise (e.g. 7 > 10).Logical values result comparing vectors using logical operators (==, <, >). can either TRUE logical statment true (e.g. 2 + 2 == 4) FALSE otherwise (e.g. 7 > 10).Indexing means retrieving vector elements numeric index (.e. position vector). can also done using logical values - case, elements corresponding TRUE retrieved.Indexing means retrieving vector elements numeric index (.e. position vector). can also done using logical values - case, elements corresponding TRUE retrieved.Sorting refers putting elements vector numeric alphabetial order. can done either directly vector using sort() reference another vector using order(). rank() allows retrieve relative rank item (.e. position vector sorted).Sorting refers putting elements vector numeric alphabetial order. can done either directly vector using sort() reference another vector using order(). rank() allows retrieve relative rank item (.e. position vector sorted).","code":""},{"path":"basics.html","id":"functions-list","chapter":"2 Basics of R Programming","heading":"Functions list","text":"","code":""},{"path":"basics.html","id":"exercises","chapter":"2 Basics of R Programming","heading":"2.3 Exercises","text":"code creates three vectors corresponding individual’s name, birth year birth month.Create vector named birthdays contains names, birth months birth years person. example, first one look like \"Thomas, February 1976.Create vector named birthdays contains names, birth months birth years person. example, first one look like \"Thomas, February 1976.Filter people born October year 1980. Store names vector named oct1980Filter people born October year 1980. Store names vector named oct1980Given vector x <- c(5, 40, 15, 10, 11). output expect following functions?sort(x)order(x)rank(x)Use R verify answers.Vector country contains names 6 countries following 4 vectors contain countries’ correspondig Expected Years Schooling, eys, Mean Years Schooling mys, Life Expectancy Birth lexp Per capita Gross National Income gni.United Nations Human Development Index (HDI) given following formula:HDI = \\(\\sqrt[3]{\\text{Life Expectancy Index} * \\text{Education Index} * \\text{Income Index}}\\), whereLife Expectancy Index = \\(\\frac{\\text{Life Expectancy}-20}{85-20}\\)Education Index = \\(\\frac{\\text{Mean Years Schooling Index} + \\text{Expected Years Schooling Index}}{2}\\)Mean Years Schooling Index = \\(\\frac{\\text{Mean Years Schooling}}{15}\\)Expected Years Schooling Index = \\(\\frac{\\text{Expected Years Schooling}}{18}\\)Income Index = \\(\\frac{ln(GNIpc) - ln(100)}{ln(75,000) - ln(100)}\\)Write R code answer following questions:Calculate HDI countries.Calculate HDI countries.Store country names HDI lower 0.75 vector coutry_lhdi. Print names countries.Store country names HDI lower 0.75 vector coutry_lhdi. Print names countries.Store country names HDI lower 0.8 GNI higher $10000 vector country_hlghStore country names HDI lower 0.8 GNI higher $10000 vector country_hlghPrint names countries HDI least high HDI Turkey (excluding Turkey).Print names countries HDI least high HDI Turkey (excluding Turkey).Print names countries Expected Years Schooling index higher Life Expectancy Index.Print names countries Expected Years Schooling index higher Life Expectancy Index.data contains records UK General Election turnout 1964 2019.Write code answer following questions:years turnout higher 70/%?years turnout higher 70/%?parties won elections turnout 0.65?parties won elections turnout 0.65?Obtain years turnout lowest highest store vector year_minmax.Obtain years turnout lowest highest store vector year_minmax.Store names parties won 3 elections highest turnout vector top3Store names parties won 3 elections highest turnout vector top3The solutions exercises available 2020-11-12.","code":"\nyear <- c(1976, 1974, 1973, 1991, 1972, 1954, \n          1985, 1980, 1994, 1970, 1988, 1951, \n          1957, 1966, 1968, 1963, 1999, 1977, \n          1984, 1998)\n\nmonth <- c(\"February\", \"February\", \"April\",\n           \"August\", \"September\", \"November\", \n           \"October\", \"December\", \"May\", \"March\", \n           \"June\", \"November\", \"October\", \"May\", \n           \"July\", \"August\", \"March\", \"July\", \n           \"October\", \"January\")\n\nname <- c(\"Thomas\", \"Natalie\", \"James\", \n          \"Gina\", \"Cate\", \"Rob\", \"Frank\",\n          \"Tyle\", \"Marshall\", \"Ted\", \"Emily\", \n          \"Brandon\", \"Yasmin\", \"Tina\", \n          \"Phillip\", \"Natasha\", \"Joan\", \n          \"Jack\", \"Alice\", \"Barney\")\ncountry <- c(\"Argentina\", \"Georgia\",\n             \"Mexico\", \"Philippines\",\n             \"Turkey\", \"Ukraine\")\neys <- c(17.6, 15.4, 14.3, 12.7, 16.4, 15.1)\nmys <- c(10.6, 12.8, 8.6, 9.4, 7.7, 11.3)\nlexp <- c(76.5, 73.6, 75, 71.1, 77.4, 72)\ngni <- c(17611, 9570, 17628, 9540, 24905, 7994)\nturnout <- c(0.771, 0.758, 0.72, 0.788, 0.728, 0.76, 0.727, 0.753, 0.777, 0.714, 0.594, 0.614, 0.651, 0.661, 0.687, 0.673)\n\nyear <- c(1964, 1966, 1970, 1974, 1974, 1979, 1983, 1987, 1992, 1997, 2001, 2005, 2010, 2015, 2017, 2019)\n\nparty <- c(\"Labour\", \"Labour\", \"Conservative\", \"Labour\",\n           \"Labour\", \"Labour\", \"Conservative\",\n           \"Conservative\", \"Conservative\",\n           \"Conservative\", \"Labour\", \"Labour\", \"Labour\",\n           \"Conservative\", \"Conservative\", \n           \"Conservative\")"},{"path":"datastructures.html","id":"datastructures","chapter":"3 Data structures","heading":"3 Data structures","text":"","code":""},{"path":"datastructures.html","id":"content-1","chapter":"3 Data structures","heading":"3.1 Content","text":"previous chapter become familiar common data structure R programming - vector. section, introduced advanced data structures often used R, particular data.frame, common way storing manipulating data R.Generally, best way examine R object using str() function, returns contents object along class. example can check works simple vectorsnum indicates integer vector [1:3] tells us index ranges 1 3.","code":"\nnumbers <- c(5, 3, 8)\nstr(numbers) num [1:3] 5 3 8\nwords <- c(\"five\",\"three\",\"eight\")\nstr(words) chr [1:3] \"five\" \"three\" \"eight\""},{"path":"datastructures.html","id":"data-frames","chapter":"3 Data structures","heading":"Data Frames","text":"previous chapter’s exercises ’ve manipulated data related basic development indicators several countries. ’re dealing multiple variables represented multiple vectors, ’s often useful store toegether one entity - data.frame. Data frames can simply thought tables, columns vector unique name. case, can store information countries data frame called dev_data.can use head function see first 5 rows data (toy example might seem unnecessary, useful get overview variables data consists potentially thousands rows).str() function also useful get overview variables included dataframe:access column stored dataframe, can use $ operator.Similarily, can use operator create new column:case vectors, data frames can indexed retrieve values stored specific positions. Since data frame table, position dataframe associated two indices - one rows, columns - first index references row second column. example, code retrieves value second row third column dev_data.Note identical :mys third column dev_data.leaving one indices empty, can also retrieve entire row/column data frame:Data frames can also indexed integer vectors. indexing always return smaller data frame. example, retrieve rows 1 5 columns 2 3, can :Similarily, character vectors referencing column names can used subset dataframe. achieve similar result one , one also type:can also use logical indexing subset dataframes. Recall previous chapter, can check values given vector satisfy certain condition :can use output generated code index dev_data data frame obtain rows gni per capita larger 10000:many useful functions work combination data frames. , several examples:command allows evaluate column names context given data frame. means, reference data frame name whenever use one columns. Suppose wanted calculate UN’s Education Index previous section’s exercises assign ’s values new column dev_data, dev_data$edu_ind. done :However, many circumstances require reference name data frame using multiple times, often making code long unreadable. avoid , ’s often useful :function takes name dataframe first argument operation want perform second argument.Similarily, subset dataframe multiple variables, subset() command can used:","code":"\ncountry <- c(\"Argentina\", \"Georgia\", \"Mexico\", \n             \"Philippines\", \"Turkey\", \"Ukraine\")\neys <- c(17.6, 15.4, 14.3, 12.7, 16.4, 15.1)\nmys <- c(10.6, 12.8, 8.6, 9.4, 7.7, 11.3)\nlexp <- c(76.5, 73.6, 75, 71.1, 77.4, 72)\ngni <- c(17611, 9570, 17628, 9540, 24905, 7994)\ndev_data <- data.frame(country, eys, mys, lexp, gni)\nhead(dev_data)      country  eys  mys lexp   gni\n1   Argentina 17.6 10.6 76.5 17611\n2     Georgia 15.4 12.8 73.6  9570\n3      Mexico 14.3  8.6 75.0 17628\n4 Philippines 12.7  9.4 71.1  9540\n5      Turkey 16.4  7.7 77.4 24905\n6     Ukraine 15.1 11.3 72.0  7994\nstr(dev_data)'data.frame':   6 obs. of  5 variables:\n $ country: chr  \"Argentina\" \"Georgia\" \"Mexico\" \"Philippines\" ...\n $ eys    : num  17.6 15.4 14.3 12.7 16.4 15.1\n $ mys    : num  10.6 12.8 8.6 9.4 7.7 11.3\n $ lexp   : num  76.5 73.6 75 71.1 77.4 72\n $ gni    : num  17611 9570 17628 9540 24905 ...\ndev_data$gni[1] 17611  9570 17628  9540 24905  7994\ndev_data$log_gni <- log(dev_data$gni)\ndev_data$log_gni[1]  9.776279  9.166388  9.777244  9.163249 10.122824  8.986447\ndev_data[2, 3][1] 12.8\ndev_data$mys[2][1] 12.8\ndev_data[1, ] #get first row    country  eys  mys lexp   gni  log_gni\n1 Argentina 17.6 10.6 76.5 17611 9.776279\ndev_data[, 2] #get second column[1] 17.6 15.4 14.3 12.7 16.4 15.1\ndev_data[c(1,5), c(2,3)]   eys  mys\n1 17.6 10.6\n5 16.4  7.7\ndev_data[c(1,5), c(\"eys\",\"mys\")]   eys  mys\n1 17.6 10.6\n5 16.4  7.7\ndev_data$gni > 10000[1]  TRUE FALSE  TRUE FALSE  TRUE FALSE\ndev_data[dev_data$gni > 10000, ]    country  eys  mys lexp   gni   log_gni\n1 Argentina 17.6 10.6 76.5 17611  9.776279\n3    Mexico 14.3  8.6 75.0 17628  9.777244\n5    Turkey 16.4  7.7 77.4 24905 10.122824\nis.data.frame(dev_data) #check if an object is of class `data.frame`[1] TRUE\nnrow(dev_data) #number of rows[1] 6\nncol(dev_data) #number of columns[1] 6\ncolnames(dev_data) #column names[1] \"country\" \"eys\"     \"mys\"     \"lexp\"    \"gni\"     \"log_gni\"\nrownames(dev_data) #row names[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\ndev_data$edu_ind <- (dev_data$mys / 15 + dev_data$eys / 18)/2\ndev_data$edu_ind <- with(dev_data, (mys / 15 + eys / 18)/2)\ndev_data[dev_data$eys > 15 & dev_data$lexp > 75, ]    country  eys  mys lexp   gni   log_gni   edu_ind\n1 Argentina 17.6 10.6 76.5 17611  9.776279 0.8422222\n5    Turkey 16.4  7.7 77.4 24905 10.122824 0.7122222\nsubset(dev_data, eys > 15 & lexp > 75)    country  eys  mys lexp   gni   log_gni   edu_ind\n1 Argentina 17.6 10.6 76.5 17611  9.776279 0.8422222\n5    Turkey 16.4  7.7 77.4 24905 10.122824 0.7122222"},{"path":"datastructures.html","id":"factors","chapter":"3 Data structures","heading":"Factors","text":"looking str(dev_data) ’ve noticed country variable vector type haven’t encountered earlier - factor. Factors specific type vectors used store values take prespecified set values, called factor levels. example, suppose two character vectors storing names students year. can use factor() create factor vector character vector. can done type vector well.can view unique levels factor using levels() function:crucial difference factor character vectors former underlying integer representation. means, ’s natural ordering levels, alphabetic default. can see using coercion function .numeric year factor.Note ordering values corresponds ordering obtained levels() function. matters circumstances (using factor variables regression models, discussed Linear Regression section course). ’s good practice explicitly pass factor levels factor() constructor. example, case, “Sophmore” comes last value factor, even though make sense second. Explicit creation factor levels can seen :can now see ordering levels different, underlying numeric representation factor:Note change value factor vector pre-specified levels:error message returned R means value trying assign factor one predefined levels (.e. “Freshman”,“Junior”, “Senior” “Sophmore”) thus NA missing value generated.However, know level values attached created future, NAs can avoided explicitly creating unused levels constructing factor vector., created variable 5 levels: Freshman, Sophmore, Junior, Senior, Graduate, even though 4 actual values factor. result, can assign value “Graduate” value without producing NAs. relevance empty factor levels become apparent next part book discussing Cross-Tabulation.can also rename levels existing factor, using levels<- command. can done either specific levels factor……levels:way, values character changed quickly.Finally, ’s confusion difference factor() .factor() functions. many contexts, can used equivalently, since create factor vector numeric character vector. However, important differences include:factor() allows explicitly pass vector levels construction, whether .factor() assigns defaultfactor() allows explicitly pass vector levels construction, whether .factor() assigns defaultThe behaviour two functions different passed factors empty levels. example, let’s create year factor earlier keep first three values. case, Sophmore Senior levels unused.behaviour two functions different passed factors empty levels. example, let’s create year factor earlier keep first three values. case, Sophmore Senior levels unused.Passing year vector .factor change anything vector’s structure:However, using factor() constructor existing factor vector convenient way drop unused levels (’s desirable):performance .factor() tends quicker numeric character vectors passed . two commands also treat NA levels slightly differently. can read Stack Overflow post.Finally, R functions data.frame constructor treat read character vectors factors default. can noticed examining dev_data data frame created earlier:can see country factor 6 levels - one country name. doesn’t make much sense, column unlikely repeating values. avoid behaviour, can set stringsAsFactors optional argument data.frame function explicitly FALSE. way, character vectors remain character variables data frame.","code":"\nname <- c(\"Thomas\",\"James\",\"Kate\",\"Nina\",\"Robert\",\"Andrew\",\"John\")\nyear_ch <- c(\"Freshman\",\"Freshman\",\"Junior\",\"Sophmore\",\"Freshman\",\"Senior\",\"Junior\")\nyear_ch[1] \"Freshman\" \"Freshman\" \"Junior\"   \"Sophmore\" \"Freshman\" \"Senior\"   \"Junior\"  \nyear <- factor(year_ch)\nyear[1] Freshman Freshman Junior   Sophmore Freshman Senior   Junior  \nLevels: Freshman Junior Senior Sophmore\nlevels(year)[1] \"Freshman\" \"Junior\"   \"Senior\"   \"Sophmore\"\nyear[1] Freshman Freshman Junior   Sophmore Freshman Senior   Junior  \nLevels: Freshman Junior Senior Sophmore\nas.numeric(year)[1] 1 1 2 4 1 3 2\nyear_ch <- c(\"Freshman\",\"Freshman\",\"Junior\",\n          \"Sophmore\",\"Freshman\",\"Senior\",\"Junior\")\nyear <- factor(year_ch, levels = c(\"Freshman\",\"Sophmore\",\"Junior\",\"Senior\"))\nlevels(year)[1] \"Freshman\" \"Sophmore\" \"Junior\"   \"Senior\"  \nas.numeric(year)[1] 1 1 3 2 1 4 3\nyear[1] <- \"Graduate\"Warning in `[<-.factor`(`*tmp*`, 1, value = \"Graduate\"): invalid factor level, NA generated\nyear_ch <- c(\"Freshman\",\"Freshman\",\"Junior\",\n          \"Sophmore\",\"Freshman\",\"Senior\",\"Junior\")\nyear <- factor(year_ch, levels = c(\"Freshman\",\"Sophmore\",\"Junior\",\"Senior\", \"Graduate\"))\nyear[1] <- \"Graduate\"\nyear[1] Graduate Freshman Junior   Sophmore Freshman Senior   Junior  \nLevels: Freshman Sophmore Junior Senior Graduate\nyear <- factor(year_ch, levels = c(\"Freshman\",\"Sophmore\",\"Junior\",\"Senior\"))\nlevels(year)[1] <- \"Fresher\"\nyear[1] Fresher  Fresher  Junior   Sophmore Fresher  Senior   Junior  \nLevels: Fresher Sophmore Junior Senior\nlevels(year) <- c(\"First\",\"Second\",\"Third\",\"Final\")\nyear[1] First  First  Third  Second First  Final  Third \nLevels: First Second Third Final\nyear_char <- c(\"Freshman\",\"Freshman\",\"Junior\",\n          \"Sophmore\",\"Freshman\",\"Senior\",\"Junior\")\nyear <- factor(year_char, levels = c(\"Freshman\",\"Sophmore\",\"Junior\",\"Senior\"))\nyear <- year[1:3]\nyear[1] Freshman Freshman Junior  \nLevels: Freshman Sophmore Junior Senior\nas.factor(year)[1] Freshman Freshman Junior  \nLevels: Freshman Sophmore Junior Senior\nfactor(year)[1] Freshman Freshman Junior  \nLevels: Freshman Junior\nstr(dev_data)'data.frame':   6 obs. of  7 variables:\n $ country: chr  \"Argentina\" \"Georgia\" \"Mexico\" \"Philippines\" ...\n $ eys    : num  17.6 15.4 14.3 12.7 16.4 15.1\n $ mys    : num  10.6 12.8 8.6 9.4 7.7 11.3\n $ lexp   : num  76.5 73.6 75 71.1 77.4 72\n $ gni    : num  17611 9570 17628 9540 24905 ...\n $ log_gni: num  9.78 9.17 9.78 9.16 10.12 ...\n $ edu_ind: num  0.842 0.854 0.684 0.666 0.712 ...\ndev_data <- data.frame(country, eys, mys, lexp, gni, stringsAsFactors = FALSE)\nstr(dev_data)'data.frame':   6 obs. of  5 variables:\n $ country: chr  \"Argentina\" \"Georgia\" \"Mexico\" \"Philippines\" ...\n $ eys    : num  17.6 15.4 14.3 12.7 16.4 15.1\n $ mys    : num  10.6 12.8 8.6 9.4 7.7 11.3\n $ lexp   : num  76.5 73.6 75 71.1 77.4 72\n $ gni    : num  17611 9570 17628 9540 24905 ..."},{"path":"datastructures.html","id":"reading-and-writing-the-data","chapter":"3 Data structures","heading":"Reading and writing the data","text":"","code":""},{"path":"datastructures.html","id":"reading-from-csv","chapter":"3 Data structures","heading":"Reading from CSV","text":"far, ’ve created small simple datasets manually typing scripts, usual way loading data R external files. common format used store data R analysis CSV file, stands Comma Separated Values. essentially means, data represented text file, values separeted columns indicate relative positions - example, csv file 5 columns 4 commas separate row.example , read data Human Development Indicators 209 countries 2018 obtained UN Human Development Reports. Yuo can download file used example .example, first argument specifies path file read string, .e. enclosed quotation marks. file can read:\n1. using absolute path - example dev <- read.csv(\"C:/Users/yourusername/Documents/dev2018.csv\") Windows dev <- read.csv(\"/Users/yourusername/Documents/dev2018.csv\") MacOS. case, need provide full path file located computer.using relative path, example. case, R search directory current working directory. Working directory simply specific folder computer R looks data. R Studio usually sets one default working directory (can changed Tools -> Global Options -> Set Default Working Directory). means every time open RStudio restart R session (described Chapter 1, working directory set default. can also change working directory manually executing setwd() function script console.can also get current working directory using getwd() function:users tend include setwd(path//project) beginnings scripts, potentially problematic, whenever move data script another folder, errors likely occur. Therefore, good practice always set working directory location R Source script keep data folder source script. can done choosing Session tabNote case, assumed selected “Set Working Directory” > “Source File” location “Session” tab Rstudio, discussed Introduction directory source file folder called “data” dev2018.csv file stored. Alternatively, dev <- read.csv(\"dev2018.csv\") read file directly working directory. also use dev <- read.csv(\"C:/Users/yourusername/Documents/dev2018.csv\") Windows dev <- read.csv(\"/Users/yourusername/Documents/dev2018.csv\") MacOS read data file arbitary folder using absolute path. Similarily data.frame constructor, can also use stringsAsFactors argument ensure character variables read strings.can also save data .csv files using write.csv, takes data frame first argument string specifying path want save file second argument. example, suppose want keep first 40 rows data store separate file.","code":"\ndev <- read.csv(\"data/un_data/dev2018.csv\", stringsAsFactors = FALSE)\nsetwd(\"C:/Users/yourusername/folder\")\ngetwd()\ndev_new <- dev[1:40, ]\nwrite.csv(dev_new, \"data/un_data/dev_new.csv\")"},{"path":"datastructures.html","id":"reading-from-other-formats","chapter":"3 Data structures","heading":"Reading from other formats","text":"csv common format, data often likely come many variants - common examples include Stata’s .dta files SPSS’ .sav, well .xlsx Excel format. R packages offer functionalities percisely deal files.far, used built-functionalities offered R. range pretty extensive ones covered course tip iceberg, much offered user-made packages, offer new functions useful specific tasks. official R packages available CRAN. use package needs installed first loaded. example, use example package named foo, first run install.packages(\"foo\") download package files CRAN install put library(foo) R Script load R. Note installation done , load library every time use - ’s , always put library calls top R script. use function package without loading first, R script execution fail! Please also note, pass package name string (.e. quotation marks) install.packages, without library.Coming back example, can use R package haven load Stata, SPSS SAS files. can see example :Similarily, data can written using:alternatives offered haven package inlcude read_sav read_xpt. packages useful reading unusual data types include readxl reading Excel files foreign broader choice file types.","code":"\ninstall.packages(\"haven\")\nlibrary(haven)\ndev_stata <- read_dta(\"data/un_data/dev2018.dta\")\nwrite_dta(dev, \"data/un_data/dev2018.dta\")"},{"path":"datastructures.html","id":"missing-values","chapter":"3 Data structures","heading":"Missing values","text":"mentioned earlier, NA missing value constant particularly important R. Real-life data likely deal time using R practice often imperfect missingness addressed one first steps analysis process..na() command can used determine whether value R object missing. returns true value index missing.count NAs R object can levarage fact TRUE values also interpreted 1 use sum function:can also verify whether object contains NAs using anyNA function. Let’s check HDI data loaded contains missing values:column returns TRUE. Therefore missingness data.Another useful function missing data analysis complete.cases. name suggests, given data frame returns logical vector TRUE row doesn’t contain missing values. can verify observations cause data missingness:","code":"\nnumbers <- c(1, 4, NA, 6, NA)\nis.na(numbers)[1] FALSE FALSE  TRUE FALSE  TRUE\nsum(is.na(numbers))[1] 2\ndev <- read.csv(\"data/un_data/dev2018.csv\")\nanyNA(dev)[1] TRUE\ndev[!complete.cases(dev), ]                                country  eys   gni lexp mys\n91  Korea (Democratic People's Rep. of) 10.8    NA 72.1  NA\n122                               Nauru 11.3 17313   NA  NA\n150                          San Marino 15.1    NA   NA  NA\n180                              Tuvalu 12.3  5409   NA  NA\n195                             Somalia   NA    NA 57.1  NA"},{"path":"datastructures.html","id":"lists","chapter":"3 Data structures","heading":"Lists","text":"final key R data structure covered section lists. Similarily data frames, lists can thought containers store data structures.2 However, unlike data frames, less strict terms contents - list can store vectors different length, data frames even lists. Lists created list() constructor.can extract elements list using names numeric index. index list, double square brackets [[ used, opposed vectors.list indexed single brackets, returns one-element list, rather object stored :can also extract elements list using $ operator, similarily data.frames. Finally, can assign values lists similarily case vectors data.frames:","code":"\nmy_list <- list(names = c(\"Tom\",\"James\",\"Tim\"), values = 1:20)\nmy_list$names\n[1] \"Tom\"   \"James\" \"Tim\"  \n\n$values\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\nmy_list[[1]][1] \"Tom\"   \"James\" \"Tim\"  \nmy_list[[\"names\"]][1] \"Tom\"   \"James\" \"Tim\"  \nvalues <- my_list[[\"values\"]]\nstr(values) int [1:20] 1 2 3 4 5 6 7 8 9 10 ...\nvalues <- my_list[\"values\"]\nstr(values)List of 1\n $ values: int [1:20] 1 2 3 4 5 6 7 8 9 10 ...\nmy_list[[\"new\"]] <- c(\"new\",\"values\")\nstr(my_list)List of 3\n $ names : chr [1:3] \"Tom\" \"James\" \"Tim\"\n $ values: int [1:20] 1 2 3 4 5 6 7 8 9 10 ...\n $ new   : chr [1:2] \"new\" \"values\""},{"path":"datastructures.html","id":"summary-1","chapter":"3 Data structures","heading":"3.2 Summary","text":"Data Frames one common data structures R. can think Excel spreadsheet tables rows columns list variables (vectors equal length), unique name. value data frame two indexes - one row number one column number. example, df[2,3] retrieves value second row third column.Data Frames one common data structures R. can think Excel spreadsheet tables rows columns list variables (vectors equal length), unique name. value data frame two indexes - one row number one column number. example, df[2,3] retrieves value second row third column.Factors special kind vectors can take pre-specified set values, determined factor created.Factors special kind vectors can take pre-specified set values, determined factor created.csv files common way storing data R. can load data using read.csv save data using write.csv.csv files common way storing data R. can load data using read.csv save data using write.csv.working directory folder computer R looks files default. can check using getwd() function, change using setwd()set location current script located selecting Session > Set Working Directory > Source File Location.working directory folder computer R looks files default. can check using getwd() function, change using setwd()set location current script located selecting Session > Set Working Directory > Source File Location.packages sets new functions developed R external developers, extending functionalities. can install using install.packages load using library function.packages sets new functions developed R external developers, extending functionalities. can install using install.packages load using library function.missing values marked R NA token. many useful functions created detect missing values, .na, complete.cases anyNA.missing values marked R NA token. many useful functions created detect missing values, .na, complete.cases anyNA.lists another type R data structure. can thought containers, can used store arbitrary elements position.lists another type R data structure. can thought containers, can used store arbitrary elements position.","code":""},{"path":"datastructures.html","id":"functions-list-1","chapter":"3 Data structures","heading":"Functions list","text":"","code":""},{"path":"datastructures.html","id":"exercises-1","chapter":"3 Data structures","heading":"3.3 Exercises","text":"following code returns error. ? Check happends set b 1:5 instead 1:3. Explain behaviour.difference character factor vectors R? situation might prefer one vice versa?difference character factor vectors R? situation might prefer one vice versa?complete exercise, load dev2018.csv data R.complete exercise, load dev2018.csv data R.proportion rows complete?proportion rows complete?Store non-missing rows data.frame called dev_clean.Store non-missing rows data.frame called dev_clean.dev_clean, compute HDI following method outlined previous chapter.dev_clean, compute HDI following method outlined previous chapter.Use indexing retrieve:Use indexing retrieve:countries HDI greater 0.7 GNI per capita greater 1000010 countries largest GNI10 countries shortest life expactancy birththe development data Polandcountries Education Index higher Life Expectancy IndexThe UN categorizes countries 4 groups based HDI value - high human development \\(HDI \\geq 0.8\\), high human development \\(0.8 > HDI \\geq 0.7\\), medium human development \\(0.7 > HDI \\geq 0.55\\) low human development \\(0.55 > HDI\\). Based thresholds, create data frame called\nhdi_groups, element names \"vhigh\", \"high\", \"med\", \"low\", containing dataframe observations corresponding respective HDI group. many rows (fraction total data.frame size) levels consist ?following operation returns warning error result quite expect. ? replace first element list 1:5 sequence error doesn’t appear? Name two ways done.solutions exercises available 2020-11-12.","code":"\ndf <- data.frame(a = 1:10, b = 1:3)\nmy_list <- list(vals = 1:10, names = c(\"Jane\",\"Kate\"))\nmy_list[1] <- 1:5Warning in my_list[1] <- 1:5: number of items to replace is not a multiple of replacement length"},{"path":"exploratory.html","id":"exploratory","chapter":"4 Exploratory Data Analysis","heading":"4 Exploratory Data Analysis","text":"","code":""},{"path":"exploratory.html","id":"content-2","chapter":"4 Exploratory Data Analysis","heading":"4.1 Content","text":"","code":""},{"path":"exploratory.html","id":"what-is-exploratory-data-analysis","chapter":"4 Exploratory Data Analysis","heading":"What is exploratory data analysis?","text":"Next data cleaning, exploratory data analysis one first steps taken process analysing quantitative data kind. Essentially, refers getting overview data looking simple summary statistics plots understand distribution variable, well look particularly obvious pronounced relationships variables. one taking deductive approach, clear-cut, falsifiable hypothesis data defined upfront (higher per capita income related higher levels democracy income equality increases levels subjective well-), exploratory data analysis helps verify whether hypothetized relationship data - example applying -called Inter-Ocular Trauma Test (hits eyes, ’s !) plot. informs formal statistical analyses. also allows identify factors may important hypothesized relationship included formal statistical model. case inductive approach, exploratory data analysis allows find patterns form hypothesis furhter tested using formal statistical methods.chapter, cover basic exploratory methods can applied examine numeric categorical data. purpose use data UCI Machine Learning Repository, covers math grades achieved three years education sample students, along demographic variables 3. data download link available top course page. load , can use familiar read.csv function. Note case, sep optional argument specified \";\". can find reading argument function documentation (?read.csv) examining dataset using computer’s notepad app.","code":"\nmath <- read.csv(\"data/student/student-mat-data.csv\", sep = \";\")"},{"path":"exploratory.html","id":"first-look-at-the-data","chapter":"4 Exploratory Data Analysis","heading":"First look at the data","text":"loading data R, ’s useful get overview . first thing ’s worth look many variables many observations dataset. can seen environment browser next name data frame. can also access dimensions data (.e. many rows columns/observations variables ) dim function.can see math dataset consists 395 observations 33 variables. next useful step look dataset’s structure using str variable:lists variables dataset, names types. way, can scope dataset variables interesting analysis start thinking possible relationships might want investigate.Finally, can get basic summary statistics using summary function:lists minimum, maximum, mean quartiles numeric variables, along count missing values . concepts discussed detail next sections chapter. case factor variables, provides count level variable. also mentions number missing variable - case, can see couple NAs . starting analysis, need address - case, simply drop .","code":"\ndim(math)[1] 395  33\nstr(math)'data.frame':   395 obs. of  33 variables:\n $ school    : chr  \"GP\" \"GP\" \"GP\" \"GP\" ...\n $ sex       : chr  \"F\" \"F\" \"F\" \"F\" ...\n $ age       : int  18 17 15 15 16 16 16 17 15 15 ...\n $ address   : chr  \"U\" \"U\" \"U\" \"U\" ...\n $ famsize   : chr  \"GT3\" \"GT3\" \"LE3\" \"GT3\" ...\n $ Pstatus   : chr  \"A\" \"T\" \"T\" \"T\" ...\n $ Medu      : int  4 1 1 4 3 4 2 4 3 3 ...\n $ Fedu      : int  4 1 1 2 3 3 2 4 2 4 ...\n $ Mjob      : chr  \"at_home\" \"at_home\" \"at_home\" \"health\" ...\n $ Fjob      : chr  \"teacher\" \"other\" \"other\" \"services\" ...\n $ reason    : chr  \"course\" \"course\" \"other\" \"home\" ...\n $ guardian  : chr  \"mother\" \"father\" \"mother\" \"mother\" ...\n $ traveltime: int  2 1 1 1 1 1 1 2 1 1 ...\n $ studytime : int  2 2 2 3 2 2 2 2 2 2 ...\n $ failures  : int  0 0 3 0 0 0 0 0 0 0 ...\n $ schoolsup : chr  \"yes\" \"no\" \"yes\" \"no\" ...\n $ famsup    : chr  \"no\" \"yes\" \"no\" \"yes\" ...\n $ paid      : chr  \"no\" \"no\" \"yes\" \"yes\" ...\n $ activities: chr  \"no\" \"no\" \"no\" \"yes\" ...\n $ nursery   : chr  \"yes\" \"no\" \"yes\" \"yes\" ...\n $ higher    : chr  \"yes\" \"yes\" \"yes\" \"yes\" ...\n $ internet  : chr  \"no\" \"yes\" \"yes\" \"yes\" ...\n $ romantic  : chr  \"no\" \"no\" \"no\" \"yes\" ...\n $ famrel    : int  4 5 4 3 4 5 4 4 4 5 ...\n $ freetime  : int  3 3 3 2 3 4 4 1 2 5 ...\n $ goout     : int  4 3 2 2 2 2 4 4 2 1 ...\n $ Dalc      : int  1 NA 2 1 1 1 1 1 1 1 ...\n $ Walc      : int  1 1 3 1 2 2 1 1 1 1 ...\n $ health    : int  3 3 3 5 5 5 3 1 1 5 ...\n $ absences  : int  6 4 10 2 4 10 0 6 0 0 ...\n $ G1        : int  5 5 7 15 6 15 12 6 16 14 ...\n $ G2        : int  6 5 8 14 10 15 12 5 18 15 ...\n $ G3        : int  6 6 10 15 10 15 11 6 19 15 ...\nsummary(math)    school              sex                 age         address            famsize         \n Length:395         Length:395         Min.   :15.0   Length:395         Length:395        \n Class :character   Class :character   1st Qu.:16.0   Class :character   Class :character  \n Mode  :character   Mode  :character   Median :17.0   Mode  :character   Mode  :character  \n                                       Mean   :16.7                                        \n                                       3rd Qu.:18.0                                        \n                                       Max.   :22.0                                        \n                                                                                           \n   Pstatus               Medu            Fedu           Mjob               Fjob          \n Length:395         Min.   :0.000   Min.   :0.000   Length:395         Length:395        \n Class :character   1st Qu.:2.000   1st Qu.:2.000   Class :character   Class :character  \n Mode  :character   Median :3.000   Median :2.000   Mode  :character   Mode  :character  \n                    Mean   :2.749   Mean   :2.522                                        \n                    3rd Qu.:4.000   3rd Qu.:3.000                                        \n                    Max.   :4.000   Max.   :4.000                                        \n                                                                                         \n    reason            guardian           traveltime      studytime        failures     \n Length:395         Length:395         Min.   :1.000   Min.   :1.000   Min.   :0.0000  \n Class :character   Class :character   1st Qu.:1.000   1st Qu.:1.000   1st Qu.:0.0000  \n Mode  :character   Mode  :character   Median :1.000   Median :2.000   Median :0.0000  \n                                       Mean   :1.448   Mean   :2.035   Mean   :0.3342  \n                                       3rd Qu.:2.000   3rd Qu.:2.000   3rd Qu.:0.0000  \n                                       Max.   :4.000   Max.   :4.000   Max.   :3.0000  \n                                                                                       \n  schoolsup            famsup              paid            activities          nursery         \n Length:395         Length:395         Length:395         Length:395         Length:395        \n Class :character   Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                                               \n                                                                                               \n                                                                                               \n                                                                                               \n    higher            internet           romantic             famrel         freetime    \n Length:395         Length:395         Length:395         Min.   :1.000   Min.   :1.000  \n Class :character   Class :character   Class :character   1st Qu.:4.000   1st Qu.:3.000  \n Mode  :character   Mode  :character   Mode  :character   Median :4.000   Median :3.000  \n                                                          Mean   :3.944   Mean   :3.235  \n                                                          3rd Qu.:5.000   3rd Qu.:4.000  \n                                                          Max.   :5.000   Max.   :5.000  \n                                                          NA's   :1                      \n     goout            Dalc            Walc           health         absences            G1       \n Min.   :1.000   Min.   :1.000   Min.   :1.000   Min.   :1.000   Min.   : 0.000   Min.   : 3.00  \n 1st Qu.:2.000   1st Qu.:1.000   1st Qu.:1.000   1st Qu.:3.000   1st Qu.: 0.000   1st Qu.: 8.00  \n Median :3.000   Median :1.000   Median :2.000   Median :4.000   Median : 4.000   Median :11.00  \n Mean   :3.109   Mean   :1.482   Mean   :2.291   Mean   :3.554   Mean   : 5.709   Mean   :10.91  \n 3rd Qu.:4.000   3rd Qu.:2.000   3rd Qu.:3.000   3rd Qu.:5.000   3rd Qu.: 8.000   3rd Qu.:13.00  \n Max.   :5.000   Max.   :5.000   Max.   :5.000   Max.   :5.000   Max.   :75.000   Max.   :19.00  \n                 NA's   :1                                                                       \n       G2              G3       \n Min.   : 0.00   Min.   : 0.00  \n 1st Qu.: 9.00   1st Qu.: 8.00  \n Median :11.00   Median :11.00  \n Mean   :10.72   Mean   :10.41  \n 3rd Qu.:13.00   3rd Qu.:14.00  \n Max.   :19.00   Max.   :20.00  \n NA's   :1       NA's   :1      \nmath <- math[complete.cases(math), ]"},{"path":"exploratory.html","id":"numeric-vs-categorical-variables","chapter":"4 Exploratory Data Analysis","heading":"Numeric vs categorical variables","text":"","code":""},{"path":"exploratory.html","id":"numeric-variables","chapter":"4 Exploratory Data Analysis","heading":"Numeric variables","text":"","code":""},{"path":"exploratory.html","id":"histograms","chapter":"4 Exploratory Data Analysis","heading":"Histograms","text":"simplest often powerful way examine single numeric variable use histogram. Histogram divides variable ranges equal size called bins. bin represented bar, height corresponds count/proportion observations falling range. main difference histogram bar chart histogram breaks bars, variable describes assumed continuous, discrete. Let’s examine two numeric variables math dataset - age absences (total absent hours recorded teacher student) using histograms. histogram created using hist function:cases, can see lowest values frequent. example, second histogram can read 250 395 students samples absent 0-5 hours school year.","code":"\nhist(math$age, breaks = length(unique(na.omit(math$age))))\nhist(math$absences)"},{"path":"exploratory.html","id":"mean","chapter":"4 Exploratory Data Analysis","heading":"Mean","text":"Mean (aka average) simplest statistic describing numeric variable - simply sum variable/vector divided length. R, can calculate mean variable using mean function. example, let’s examine average number absences sample:done age returns value:removed missing values (NA's) start, command worked returned NA. ever come across issue, reminder need something missing data. just wish circumvent problem time , call:specify argument na.rm(remove NA values) TRUE.can also use trim argument specify fraction observations removed end sorted variables calculating mean. makes estimate mean robust potentially large unrepresentative values affecting calculated value - -called outliers, discussed extensively section quantiles. Note specifying trim argument 0.1 doesn’t seem change mean age significantly:However, case absences changes value average absences quite lot. Can think reason ? Take look histograms variables.","code":"\nsum(math$absences)/nrow(math)[1] 5.737662\nmean(math$absences)[1] 5.737662\nmean(math$age)[1] 16.68052\nmean(math$age, na.rm = TRUE)[1] 16.68052\nmean(math$age, na.rm = TRUE, trim = 0.1)[1] 16.61165\nmean(math$absences, trim = 0.1)[1] 4.245955"},{"path":"exploratory.html","id":"variance-and-standard-deviation","chapter":"4 Exploratory Data Analysis","heading":"Variance and standard deviation","text":"mean offers good description central tendency variable (.e. value expect see often), describing variable just mean can misleading. example, consider values -10000, 20, 10000 15, 20, 25. cases mean :However, misleading say variables similar. try describe difference computing average distance value mean:However, results 0, since negative positive values example cancel . avoid , can measure variance, calculates mean sum squared distances value variable mean. Since distance squared (always positive), positive negative values cancel .can see captures difference two vectors.can calculate variance simple shortcut R, var function:Note gives us different results variance computed hand. calculate population wariance divide number observations population (length vector), N. , variance calculated “manually” equivalent :Instead, var() function calculates sample variance, divide sum squared distances mean \\(N-1\\). dividing sample N tends underestimate variance population. mathematical reasons behind clearly outlined article. , can “manually” arrive equivalent estiamte one obtained using var function :can apply variance function absence age, see spread:One problem arising using variance describe data units aren’t interpretable, since squared. Therefore, saying variance absence time 64 squared hours doesn’t sound intuitive. avoid , usually use use standard deviation practice, simply square root variance. taking square root return variable original units. standard deviation variable calculated using sd function:ethat including na.rm = TRUE option illsutrative purposes , since remove missing values, earlier.can know compare standard deviation mean variables:can clearly seen hours students’ absence variability students’ ages. makes intuitive sense, since sample consists students roughly age group (easiest way can see running unique(math$age)). time, students differ match total hours absence. explains trimmed mean different overall mean case absences, yet quite similar age.can use widget see varying standard deviation mean affects distribution variable (case normally distributed random variable). Note need active internet connection app load.","code":"\nx <- c(15, 20, 25)\ny <- c(-985, 20, 1025)\nmean(x) == mean(y)[1] TRUE\nmean(x - mean(x))[1] 0\nmean(y - mean(y))[1] 0\nmean((x - mean(x))^2)[1] 16.66667\nmean((y - mean(y))^2)[1] 673350\nvar(x)[1] 25\nvar(y)[1] 1010025\nsum((x - mean(x))^2)/length(x)[1] 16.66667\nmean((x - mean(x))^2)[1] 16.66667\nsum((x - mean(x))^2)/(length(x) - 1) == var(x)[1] TRUE\nvar(math$age, na.rm = TRUE)[1] 1.619021\nvar(math$absences)[1] 65.22527\nsd(math$age, na.rm = TRUE)[1] 1.272407\nsd(math$age, na.rm = TRUE) == sqrt(var(math$age, na.rm = TRUE))[1] TRUE\nwith(math, c(mean = mean(age, na.rm = TRUE), \n  sd = sd(age, na.rm = TRUE)))     mean        sd \n16.680519  1.272407 \nwith(math, c(mean = mean(absences, na.rm = TRUE), \n  sd = sd(absences, na.rm = TRUE)))    mean       sd \n5.737662 8.076216 "},{"path":"exploratory.html","id":"quantiles","chapter":"4 Exploratory Data Analysis","heading":"Quantiles","text":"final statistic going discuss quantile. Quantiles allow us get better grasp distribution data. Essentially, quantiles cut points divide variable intervals equal sizes. example, deciles 10-quantiles, dividing variable 10 ranges. example 8th decile variable value greater 80% values variable. R can obtain arbitrary quantile using quantile function, specifying proportion cutpoints probs argument.example, can see 90% values variable absences lower 14. probs argument can either scalar vector, can obtain multiple quantiles . example example obtain -called quartiles (4-quantiles).get deciles :can visualize using histogram:","code":"\nquantile(math$absences, probs = 0.9)90% \n 14 \nquantile(math$absences, probs = c(0, .25, .5, .75, 1)) #quartiles  0%  25%  50%  75% 100% \n   0    0    4    8   75 \nquantile(math$absences, probs = seq(0, 1, by = 0.1))  0%  10%  20%  30%  40%  50%  60%  70%  80%  90% 100% \n 0.0  0.0  0.0  1.2  2.0  4.0  4.0  6.0 10.0 14.0 75.0 "},{"path":"exploratory.html","id":"median","chapter":"4 Exploratory Data Analysis","heading":"Median","text":"median specific quantile - 50th percentile variable, .e. midpoint variable’s distribution. opposed mean, ’s affected outlying values. Large differences mean meadian often evidence skew variable’s distribution.","code":""},{"path":"exploratory.html","id":"outliers","chapter":"4 Exploratory Data Analysis","heading":"Outliers","text":"Finally, mentioned earlier, quantiles particularly useful comes identifying outliers. Outliers observations extreme values, lying far majority values dataset. cases may results data collection error, others simply rare examples variable interest taking high low value. Outliers can often extert high levarage given statistic measuring (mean), removing may sometimes change results analysis significantly. Thus, often worth removing re-running analysis make sure ’s affected severly small number observations extreme values. Note say outliers always removed disregarded - contrary , observations outlying values treated extra care role analyst examine values extreme possible implications analysis.Quantiles can used find outlying observations - example, looking 0.001 0.999 cutpoints, considering values outiers.","code":""},{"path":"exploratory.html","id":"box-plots","chapter":"4 Exploratory Data Analysis","heading":"Box plots","text":"Box plots commonly used visualize distribution variable. , use boxplot function plot boxplot age variable math dataset.box middle plot corresponds inter-quartile range variable (IQR) - range 1st 3rd quartile variable (equivalent value range 25th 75th percentile). thick line middle corrsponds variable’s median (2nd quartile/50th percentile). ‘whiskers’ (.e. horizontal lines connected dashed line end box) correspond minimum maximum values variable. maximum defined largest value variable smaller number 1.5 IQR third quartile minimum lowest value variable larger number 1.5 IQR first quartile. Anything /whiskers numbers considered outlier marked dot. example can see one observation outlier, lying significantly upper whisker boxplot. can identify value plugging formula upper whisker (#3rd quartile + \\(1.5IQR\\)) finding value lies .useful many circumstances, box plots can deceiving, two similarily looking box plots can represent different disttributions. ’s always useful look variable’s histogram well. can seen example :","code":"\nboxplot(math$age)\nmaximum <- quantile(math$age, 0.75, na.rm = TRUE, names = FALSE) + \n  1.5 * IQR(math$age, na.rm = TRUE)\nmath$age[which(math$age > maximum)][1] 22"},{"path":"exploratory.html","id":"scatter-plots","chapter":"4 Exploratory Data Analysis","heading":"Scatter plots","text":"Finally, good way explore relationship two numeric variables visually scatter plots. Scatter plots represent observation marker, x-axis represnting value one variable y-axis another. Scatter plots simply created using plot function.example , can see ’s positive relationship student’s grade first year grade second year. plot sufficient make strong empirical claims, usually valuable first step finding statistical regularities dataset. formal ways measuring association variables discussed sections statisical association linear regression.","code":"\nplot(math$G1, math$G2)"},{"path":"exploratory.html","id":"categorical-variables","chapter":"4 Exploratory Data Analysis","heading":"Categorical variables","text":"","code":""},{"path":"exploratory.html","id":"cross-tabulation","chapter":"4 Exploratory Data Analysis","heading":"Cross-tabulation","text":"Categorical variables often best described frequency tables, provide counts number occurrences level categorical variable.Additionally, can transform table proportions, rather frequencies, using prop.table function transform output table.can also convert table bar plot, using barplot function.table function can also used cross-tabulation - creating table summarizing count observations overlap two categories. example look relationship reason choosing particular school paid classes attendance.appears students chose school course preference less likely attend extra paid classes students choosing school reasons.can made apparent substitute frequencies proportions:Note case, proportions calculated respect total count participants (.e. add 1). comparison purposes, might useful look proportion respect total categories. can specified margin argument. setting 1, calculate proportions respect row margins, .e. divide counts individuals paid variable total category reason variable.analogy, margin = 2 leads division column margins, .e. sums categories paid variable.","code":"\ntable(math$sex)\n  F   M \n202 183 \nprop.table(table(math$sex))\n        F         M \n0.5246753 0.4753247 \nbarplot(table(math$Mjob))\nbarplot(prop.table(table(math$Mjob)),\n        names.arg = c(\"At home\", \"Health\", \"Other\", \"Services\", \"Teacher\"))\ntable(math$reason, math$paid)            \n             no yes\n  course     93  48\n  home       51  57\n  other      15  20\n  reputation 50  51\nprop.table(table(math$reason, math$paid))            \n                     no        yes\n  course     0.24155844 0.12467532\n  home       0.13246753 0.14805195\n  other      0.03896104 0.05194805\n  reputation 0.12987013 0.13246753\nprop.table(table(math$reason, math$paid), margin = 1)            \n                    no       yes\n  course     0.6595745 0.3404255\n  home       0.4722222 0.5277778\n  other      0.4285714 0.5714286\n  reputation 0.4950495 0.5049505\nprop.table(table(math$reason, math$paid), margin = 2)            \n                     no        yes\n  course     0.44497608 0.27272727\n  home       0.24401914 0.32386364\n  other      0.07177033 0.11363636\n  reputation 0.23923445 0.28977273"},{"path":"exploratory.html","id":"customizing-visualizations","chapter":"4 Exploratory Data Analysis","heading":"Customizing visualizations","text":"previous sections, discussed basic tools data visualizations R, histograms, scatter plots, box plots bar charts. R base graphics allows user create powerful great-looking visualizations. However achieving can quite complicated. , dedicated called ggplot2 created enable creating good-looking informative visualziations much simpler user interface. data visualization chapter covers detail. However, case wanted start preparing visualizations purposes exploratory data analysis, might find tips useful:","code":""},{"path":"exploratory.html","id":"changing-axis-labels","chapter":"4 Exploratory Data Analysis","heading":"Changing axis labels","text":"case every plot R can change axis labels using xlab ylab arguments:can also add title specifying main argument:color objects plot can altered using col argument:can also specified character vector, different color point:make informative, can also add legend using legend function:can also change limits axes, specifying xlim ylim arguments","code":"\nplot(math$G1, math$G2, xlab = \"Grade in term 1\", ylab = \"Grade in term 2\")\nplot(math$G1, math$G2, \n     xlab = \"Grade in term 1\", ylab = \"Grade in term 2\",\n     main = \"Student grades\")\nplot(math$G1, math$G2, \n     xlab = \"Grade in term 1\", ylab = \"Grade in term 2\",\n     main = \"Student grades\",\n     col = \"red\")\ncol_gender <- rep(\"red\", nrow(math))\ncol_gender[which(math$sex == \"F\")] <- \"blue\"\nplot(math$G1, math$G2, \n     xlab = \"Grade in term 1\", ylab = \"Grade in term 2\",\n     main = \"Student grades\",\n     col = col_gender)\ncol_gender <- rep(\"red\", nrow(math))\ncol_gender[which(math$sex == \"F\")] <- \"blue\"\nplot(math$G1, math$G2, \n     xlab = \"Grade in term 1\", ylab = \"Grade in term 2\",\n     main = \"Student grades\",\n     col = col_gender)\nlegend('bottomright', \n       legend = c('Female', 'Male'),\n       col = c('blue', 'red'), pch = 1)\ncol_gender <- rep(\"red\", nrow(math))\ncol_gender[which(math$sex == \"F\")] <- \"blue\"\nplot(math$G1, math$G2, \n     xlab = \"Grade in term 1\", ylab = \"Grade in term 2\",\n     main = \"Student grades\", xlim = c(0, 30), ylim = c(0, 30))"},{"path":"exploratory.html","id":"summary-2","chapter":"4 Exploratory Data Analysis","heading":"4.2 Summary","text":"Exploratory data analysis essential first step quantitative data analysis. provides overview data allows select variables interest, verify first intuitions data explore possible relationships. Functions useful first overview include str() summary.Exploratory data analysis essential first step quantitative data analysis. provides overview data allows select variables interest, verify first intuitions data explore possible relationships. Functions useful first overview include str() summary.Histograms useful way summarizing variable’s distribution representing bars equal width (.e. equal value ranges), height corresponds number/proportion values within given range.Histograms useful way summarizing variable’s distribution representing bars equal width (.e. equal value ranges), height corresponds number/proportion values within given range.Mean, variance standard deviation commonly used measures numeric data. first refers likely value variable, later two - variable’s spread. advantage standard deviation variance ’s expressed units data. can obtain R using mean, var sd functions.Mean, variance standard deviation commonly used measures numeric data. first refers likely value variable, later two - variable’s spread. advantage standard deviation variance ’s expressed units data. can obtain R using mean, var sd functions.Quantiles cutpoints divide numeric variable ranges equal proportions. can calculate arbitrary quantiles using quantile function.Quantiles cutpoints divide numeric variable ranges equal proportions. can calculate arbitrary quantiles using quantile function.Box plots summarize distribution variable presenting interquartile range box, median tick line middle, whiskers extending maximum minimum dots marking outliers.Box plots summarize distribution variable presenting interquartile range box, median tick line middle, whiskers extending maximum minimum dots marking outliers.Scatter plots useful explore relationship two numerical variables. can create using plot function.Scatter plots useful explore relationship two numerical variables. can create using plot function.Categorical variables describe data can classified number discrete categories. can summarize one categorical variable relationship two categorical variables using frequency tables, available R table function. prop.table function can normalize frequencies table cells proportions. can also wrap table barplot.Categorical variables describe data can classified number discrete categories. can summarize one categorical variable relationship two categorical variables using frequency tables, available R table function. prop.table function can normalize frequencies table cells proportions. can also wrap table barplot.","code":""},{"path":"exploratory.html","id":"functions-list-2","chapter":"4 Exploratory Data Analysis","heading":"Functions list","text":"","code":""},{"path":"exploratory.html","id":"exercises-2","chapter":"4 Exploratory Data Analysis","heading":"4.3 Exercises","text":"Match histograms boxplots :variable x contains numbers [1, 20, 4, 50, 30, 40]. Compute IQR. values whiskers box plot? () outliers? Confirm calculations plotting box plotThe variable x contains numbers [1, 20, 4, 50, 30, 40]. Compute IQR. values whiskers box plot? () outliers? Confirm calculations plotting box plotLoad student-por.csv R session. data describes grades obtained students Portugeese class consists variables similar math dataset. Conduct EDA preforming following steps:Load student-por.csv R session. data describes grades obtained students Portugeese class consists variables similar math dataset. Conduct EDA preforming following steps:Examine variables dataset, types, distribution first 5 observations.Examine variables dataset, types, distribution first 5 observations.Get proportion missing observations (overall variable) remove observations missing values.Get proportion missing observations (overall variable) remove observations missing values.Use tools choice get analyze distribution age, absence grade variables. Identify outliers cases. variables compare couterparts math dataset analyzed chapter?Use tools choice get analyze distribution age, absence grade variables. Identify outliers cases. variables compare couterparts math dataset analyzed chapter?many girls boys por dataset? Visualize using bar plot.many girls boys por dataset? Visualize using bar plot.solutions exercises available 2020-11-12.","code":"\npor <- read.csv(\"data/student/student-por.csv\", sep = \";\")"},{"path":"programming.html","id":"programming","chapter":"5 Key Programming Concepts","heading":"5 Key Programming Concepts","text":"","code":""},{"path":"programming.html","id":"content-3","chapter":"5 Key Programming Concepts","heading":"5.1 Content","text":"make data analysis efficient, crucial understand crucial programming concepts. first part section discuss loops statements. -called “control flow statements”, common almost programming languages. second part discuss creation basic usage functions. Finally, third part go sapply() function family, common tool used R apply functions objects multiple times.","code":""},{"path":"programming.html","id":"control-flow-statements","chapter":"5 Key Programming Concepts","heading":"Control flow statements","text":"","code":""},{"path":"programming.html","id":"for-loops","chapter":"5 Key Programming Concepts","heading":"For loops","text":"loops essentially way telling programming language “perform operations ask N times”. loop R beginns () statement, followed opening curly brace { line - esentially opening -loop. , usually new line, place code want execute. , last line close loop another curly brace }. can execute loop placing cursor either statement (first line) closing brace (last line) executing code. , can see loop printing string \"Hello world!\" 5 timesThe statements variable sequentially take values object (usually vector) specified right hand side keyword. majority cases, object sequence integers, example , takes values element vector 1:5 prints .loop used add constant element vector:However, R redundant, vectorization (see section vectors chapter 2). statement os equivalent :simpler, also efficient.Another, practical aplication loop examine columns data frame missing values, :, can see 0 misisng values country name, 1 missing value expected years schooling variable , 3 missing values gni life expectancy 5 missing values mean years schooling.bit useful previous example, R still offers shorthand method problems, discussed detail last part chapter. general, due phenomena vectorization, loops rarely used simple data analysis R. However, core element programming , therefore ’s important understand . fact, vectorization made possible loops used R background - simply faster efficient versions.","code":"\nfor(i in 1:5) {\n  print(\"Hello world\")\n}[1] \"Hello world\"\n[1] \"Hello world\"\n[1] \"Hello world\"\n[1] \"Hello world\"\n[1] \"Hello world\"\nfor(i in 1:5) {\n  print(i)\n}[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\nx <- c(4, 5, 1, 2, 9, 8, 0, 5, 3)\nx[1] 4 5 1 2 9 8 0 5 3\n#for all integers between 1 and length of vector x:\nfor(i in 1:length(x)) { \n  x[i] <- x[i] + 5\n}\nx[1]  9 10  6  7 14 13  5 10  8\nx <- c(4, 5, 1, 2, 9, 8, 0, 5, 3)\nx + 5[1]  9 10  6  7 14 13  5 10  8\ndev <- read.csv(\"data/un_data/dev2018.csv\",\n                stringsAsFactors = FALSE)\nmissing <- numeric() #create empty numeric vector\nfor (i in 1:length(dev)){\n  missing[i] <- sum(is.na(dev[,i])) #get sum of missing for ith column\n  names(missing)[i] <- names(dev)[i] #name it with ith column name\n}\nmissingcountry     eys     gni    lexp     mys \n      0       1       3       3       5 "},{"path":"programming.html","id":"if-statements","chapter":"5 Key Programming Concepts","heading":"If statements","text":"statements another crucial programming concept. essentially allow performing computation conditionally logical statement. words, depending logical expression operation performed . loops R constructed following way:logical_expression must expression evaluates logical value, example X > 5, country == \"France\" .na(x). operations performed logical_expression evaluates TRUE. simples possible example beIf naturally complemented else clause, .e. operations performed otherwise. general form statement :case, R first checks logical_expression evaluates TRUE, doesn’t, performs other_operations. example:Finally, else allows provide another statement evaluated. general form statement :, R first checks logical_statement, ’s FALSE proceeds check other_logical_statement. second one TRUE performs other_operation ’s FALSE proceeds perform yet_another_operation. extension previous example:-ELSE statments can used conditionally replace values. example, suppose want create variable 1 country France 0 otherwise. :, vectorization, R offers shorthand , ifelse() function:look documentation ?ifelse, can see takes three arguments - test, yes . test argument logical condition - logical_statement , small subtle difference can evaluate logical vector rather one single logical value. yes argument value returned function test TRUE argument returned test FALSE. can fully see example :","code":"\nif (logical_expression) {\n  operations\n}\nx <- 2\nif (x > 0) {\n  print(\"the value is greater than 0\")\n}[1] \"the value is greater than 0\"\nx <- -2\nif (x > 0) {\n  print(\"the value is greater than 0\")\n}\nif (logical_expression) {\n  operations\n} else {\n  other_operations\n}\nx <- -2\nif (x > 0) {\n  print(\"the value is greater than 0\")\n} else {\n  print(\"the value is less or equal than 0\")\n}[1] \"the value is less or equal than 0\"\nif (logical_statement) { \n  operation\n} else if (other_logical_statement) {\n  other_operation\n} else {\n  yet_another_operation\n}\nx <- 2\nif (x > 0) {\n  print(\"The value is positive\")\n} else if (x < 0) {\n  print(\"The value is negative\") \n} else {\n  print(\"The value is 0\")\n}[1] \"The value is positive\"\ndev$france <- 0\nfor (i in 1:nrow(dev)) {\n  if (dev$country[i] == \"France\") {\n    dev$france[i] <- 1\n  }\n}\n\ndev$france[dev$country == \"France\"][1] 1\ndev$france <- ifelse(dev$country == \"France\", 1, 0)\ndev$france[dev$country == \"France\"][1] 1\nifelse(c(TRUE, FALSE, FALSE, TRUE), \"yes\", \"no\")[1] \"yes\" \"no\"  \"no\"  \"yes\"\nifelse(c(TRUE, FALSE, FALSE, TRUE), 1, 0)[1] 1 0 0 1"},{"path":"programming.html","id":"functions","chapter":"5 Key Programming Concepts","heading":"Functions","text":"R known functional programming language - already seen, almost operations performed done using functions. also possible create , custom functions combining functions data structures. done using function() keyword. general syntax function looks follows:R object, can use almost name instead function_name. Arguments separeted commas (example arg1, arg2) - objects pass function perform arbitrary operations. , arguments can arbitrary names, need use within function consistently. Finally, functions return value - last object called within function (output example).creating function can run , exactly way R’s built-functions. simple example return number missing values object:also implement summary statistics function, similar describe() discussed previous chapter:Let’s walk function Given vector x, function :\n1. Checks whether x numeric vector. , returns list ’s mean, standard deviation interquartile range.\n2. Else, checks x character vector. , returns list containng length average number characters.\n3. Else, checks x factor. returns list containing length average number character.can see works :","code":"\nfunction_name <- function(arg1, arg2) {\n  output <- operations(arg1, arg2)\n  output\n}\ncount_na <- function(x) {\n  sum(is.na(x))\n}\n\ncount_na(dev$mys)[1] 5\nsummary_stats <- function(x) {\n  if (is.numeric(x)) {\n    list(Mean = mean(x, na.rm = TRUE), \n                SD = sd(x, na.rm = TRUE), \n                IQR = IQR(x, na.rm = TRUE))\n  } else if (is.character(x)) {\n    list(Length = length(x), \n                  Mean_Nchar = mean(nchar(x)))\n  } else if (is.factor(x)) {\n  list(Length = length(x), \n       Nlevels  = length(levels(x)))\n  }\n}\nsummary_stats(c(1, 2, 3, 10))$Mean\n[1] 4\n\n$SD\n[1] 4.082483\n\n$IQR\n[1] 3\nsummary_stats(dev$country)$Length\n[1] 195\n\n$Mean_Nchar\n[1] 9.902564\nsummary_stats(as.factor(dev$country))$Length\n[1] 195\n\n$Nlevels\n[1] 195"},{"path":"programming.html","id":"keyword-arguments","chapter":"5 Key Programming Concepts","heading":"Keyword arguments","text":"Many functions used R come -called default arguments - already mentioned sorting. defining functions, can make use functionality well. example, count_na example can modified following way:proportion argument controls whether function returns number NAs value proportion entire vector:couple reasons functions frequently applied analyzing data:\n1. avoid repetition - often, need perform operation repeatedly - sometimes dataframe tens hunderds columns even multiple data frames. avoid re-writing code (always increases chance error occuring).\n2. enhance clarity - perform long complicated series operations dataset, ’s often much easier break functions. need come back code long time, often much easier see recode_missing_values(data) appear code, record_missing_values function defined somewhere else, don’t need go code step step, understand particular functions return.\n3 improve performance - operations ’ve seen R take fractions seconds, larger data can often lead longer computation times. Functions can combined tools make computation elegant quicker - methods discussed next section.","code":"\ncount_na <- function(x, proportion = TRUE) {\n  num_na <- sum(is.na(x))\n  if (proportion == TRUE) {\n    num_na/length(x)\n  } else {\n    num_na\n  }\n}\ncount_na(dev$gni)[1] 0.01538462\ncount_na(dev$gni, proportion = TRUE) #same as above[1] 0.01538462\ncount_na(dev$gni, proportion = FALSE)[1] 3"},{"path":"programming.html","id":"sapply","chapter":"5 Key Programming Concepts","heading":"Sapply","text":"Recall code used check column data frame missingness loops section:re-write using new knowledge functions, :may look bit fancy, fact code used perform operation doesn’t differ much terms clarity. exact result can achieved using sapply() function. sapply() takes two arguments - R object, vector data frame function. , applies function element object (.e. value case vectors, column/variable case data frames).result exactly previous case. sapply() used count_na function columns dev dataset.using short, simple functions, sapply() can even concise, can defined function without giving name. example , instead defining count_na separately, define directly within sapply() call (.e. inside parentheses). yields result.Consider function . expect return? Try going element code separately. can check rowSums command works typing ?rowSums R console.function takes vector input computes three quantiles values - 25%, 50%, 75%. may recall previous chapter quantiles cut points divide variable ranges equal proportions data set. resulting quantiles vector consists three values, corresponding thre three quantiles. use sapply three values compare value x vector. result, obtain 3 x n array, n length x. values x get three logical values. TRUE corresponding value x larger quantile FALSE corresponding value x lower quantile. can sum results row, using rowSums. final result vector values 0, 1 2. value 0 corresponding value x less quartiles, 1 greater equal .25, 2 greater equal 0.5 3 greater equal . finally add 1 , correspond true quartile numbers (1st quartile, rather 0th quartile, etc).can use split function, takes data frame vector input splits data frame several parts, value splitting variable. result, obtain dev_split dataset, stores 4 data frames, countries respective quantile expected years schooling.can look descriptive statistics quartiles using:working R looking help online, may stumble upon variants sapply() functions. Essentially, R functions apply name serve purpose - applying function element object. lapply() less user friendy version sapply(), always returns list, vector. vapply() forces user determine type output, makes behaviour predictible slightly faster. tapply() applies function data frame group determined another variable - similar procedure using split() sapply(), less steps.","code":"\nmissing <- numeric() #create empty numeric vector\nfor (i in 1:length(dev)){\n  missing[i] <- sum(is.na(dev[,i])) #get sum of missing for ith column\n  names(missing)[i] <- names(dev)[i] #name it with ith column name\n}\ncount_na <- function(x) {\n  sum(is.na(x))\n}\n\nmissing <- numeric()\nfor (i in 1:length(dev)) {\n  missing[i] <- count_na(dev[,i])\n  names(missing)[i] <- names(dev)[i]\n}\nmissingcountry     eys     gni    lexp     mys  france \n      0       1       3       3       5       0 \nsapply(dev, count_na)country     eys     gni    lexp     mys  france \n      0       1       3       3       5       0 \nsapply(dev, function(x) sum(is.na(x)))country     eys     gni    lexp     mys  france \n      0       1       3       3       5       0 \nquartile <- function(x) {\n  quantiles <- quantile(x, c(0.25, 0.5, 0.75), na.rm = TRUE)\n  comparisons <- sapply(quantiles, function(y) y <= x)\n  rowSums(comparisons) + 1\n}\ndev_split <- split(dev, quartile(dev$eys))\nhead(dev_split[[1]])                    country  eys  gni lexp mys france\n1               Afghanistan 10.1 1746 64.5 3.9      0\n14               Bangladesh 11.2 4057 72.3 6.1      0\n27             Burkina Faso  8.9 1705 61.2 1.6      0\n33 Central African Republic  7.6  777 52.8 4.3      0\n34                     Chad  7.5 1716 54.0 2.4      0\n38                  Comoros 11.2 2426 64.1 4.9      0\nsapply(dev_split, summary)$`1`\n   country               eys              gni             lexp            mys            france \n Length:47          Min.   : 5.000   Min.   :  777   Min.   :52.80   Min.   :1.600   Min.   :0  \n Class :character   1st Qu.: 8.700   1st Qu.: 1611   1st Qu.:60.80   1st Qu.:3.700   1st Qu.:0  \n Mode  :character   Median : 9.700   Median : 2318   Median :64.30   Median :4.850   Median :0  \n                    Mean   : 9.415   Mean   : 3579   Mean   :63.89   Mean   :4.861   Mean   :0  \n                    3rd Qu.:10.550   3rd Qu.: 3731   3rd Qu.:67.00   3rd Qu.:6.075   3rd Qu.:0  \n                    Max.   :11.200   Max.   :17796   Max.   :75.10   Max.   :9.800   Max.   :0  \n                                     NA's   :1                       NA's   :1                  \n\n$`2`\n   country               eys             gni              lexp            mys             france \n Length:50          Min.   :11.30   Min.   :   660   Min.   :58.90   Min.   : 3.100   Min.   :0  \n Class :character   1st Qu.:11.80   1st Qu.:  4232   1st Qu.:68.03   1st Qu.: 6.500   1st Qu.:0  \n Mode  :character   Median :12.30   Median :  6903   Median :71.50   Median : 7.850   Median :0  \n                    Mean   :12.22   Mean   : 10788   Mean   :70.39   Mean   : 7.869   Mean   :0  \n                    3rd Qu.:12.70   3rd Qu.: 11578   3rd Qu.:73.83   3rd Qu.: 9.475   3rd Qu.:0  \n                    Max.   :13.00   Max.   :110489   Max.   :80.10   Max.   :11.600   Max.   :0  \n                                                     NA's   :2       NA's   :2                   \n\n$`3`\n   country               eys             gni             lexp            mys             france \n Length:47          Min.   :13.10   Min.   : 3317   Min.   :63.90   Min.   : 5.500   Min.   :0  \n Class :character   1st Qu.:13.65   1st Qu.:10694   1st Qu.:74.53   1st Qu.: 8.600   1st Qu.:0  \n Mode  :character   Median :14.30   Median :14356   Median :76.05   Median : 9.900   Median :0  \n                    Mean   :14.19   Mean   :22644   Mean   :75.45   Mean   : 9.883   Mean   :0  \n                    3rd Qu.:14.70   3rd Qu.:26054   3rd Qu.:76.88   3rd Qu.:11.200   3rd Qu.:0  \n                    Max.   :15.10   Max.   :99732   Max.   :82.10   Max.   :12.600   Max.   :0  \n                                    NA's   :1       NA's   :1       NA's   :1                   \n\n$`4`\n   country               eys             gni             lexp            mys            france    \n Length:50          Min.   :15.20   Min.   : 9570   Min.   :72.40   Min.   : 7.70   Min.   :0.00  \n Class :character   1st Qu.:15.68   1st Qu.:24906   1st Qu.:77.25   1st Qu.:10.43   1st Qu.:0.00  \n Mode  :character   Median :16.35   Median :34918   Median :81.20   Median :12.25   Median :0.00  \n                    Mean   :16.79   Mean   :35322   Mean   :79.66   Mean   :11.55   Mean   :0.02  \n                    3rd Qu.:17.40   3rd Qu.:45698   3rd Qu.:82.38   3rd Qu.:12.70   3rd Qu.:0.00  \n                    Max.   :22.10   Max.   :83793   Max.   :84.70   Max.   :14.10   Max.   :1.00  "},{"path":"programming.html","id":"summary-3","chapter":"5 Key Programming Concepts","heading":"5.2 Summary","text":"-loops allow perform operation multiple times range values one variable. constructed using (vector). use R relatively rare due vectorization.-statements control whether na operation performed depending value logical condition. conditionally modify values vectors, use ifelse(test, yes, )-Functions can created user combine multiple operations shorter pieces code, allows avoid repetition. take one many arguments return one value.-sapply() function used applying function element vector column data frame. may find versions , apply name, perform task, slight alteration.","code":""},{"path":"programming.html","id":"functions-list-3","chapter":"5 Key Programming Concepts","heading":"Functions list","text":"","code":""},{"path":"programming.html","id":"exercises-3","chapter":"5 Key Programming Concepts","heading":"5.3 Exercises","text":"Suppose pass data frame summary_stats function. function return? ?Suppose pass data frame summary_stats function. function return? ?Use summary_stats function summarize variable iris dataset. can load using data(iris).Use summary_stats function summarize variable iris dataset. can load using data(iris).Use loop create scatter plot Sepal.Width Sepal.length attributes iris dataset flower species (specified Species variable) different marker color. , use skeleton code .Use loop create scatter plot Sepal.Width Sepal.length attributes iris dataset flower species (specified Species variable) different marker color. , use skeleton code .Create function called detect_outliers take vector quantile threshold argument return indices values can considered outliers given threshold (.e. lie nth quantile 100 - nth quantile).Create function called detect_outliers take vector quantile threshold argument return indices values can considered outliers given threshold (.e. lie nth quantile 100 - nth quantile).Extend function returns rows data frame contain outliers (numerical) variables.Extend function returns rows data frame contain outliers (numerical) variables.Apply function exercise dev dataset. countries can considered outliers?Apply function exercise dev dataset. countries can considered outliers?Recall quartile function examples . Can extend :Recall quartile function examples . Can extend :splits variable arbitary number ranges equal proportions (example deciles).splits variable arbitary number ranges equal proportions (example deciles).returns sensible default value vector missing. “sensible default” ? Make default value specifying function arguments.returns sensible default value vector missing. “sensible default” ? Make default value specifying function arguments.Try applying new function dev dataset splitting parts using split. may compare descriptive statistics part using lapply function.Try applying new function dev dataset splitting parts using split. may compare descriptive statistics part using lapply function.solutions exercises available 2021-01-07.","code":"data(iris)\nplot(-99, -99, xlim = c(min(iris$Sepal.Width), max(iris$Sepal.Width)),\n     ylim = c(min(iris$Sepal.Length), max(iris$Petal.Length)))\nfor (...) {\n  points(x = , y = , col = , pch = )\n}\nquartile <- function(x) {\n  quantiles <- quantile(x, c(0.25, 0.5, 0.75), na.rm = TRUE)\n  comparisons <- sapply(quantiles, function(y) y <= x)\n  rowSums(comparisons) + 1\n}"},{"path":"dplyr.html","id":"dplyr","chapter":"6 Data Manipulation","heading":"6 Data Manipulation","text":"","code":""},{"path":"dplyr.html","id":"content-4","chapter":"6 Data Manipulation","heading":"6.1 Content","text":"already discussed methods data manipulation, indexing, subsetting modifying data frames, majority R users approach task using dedicated collection packages called tidyverse, introduced Hadley Wickham, statistician New Zealand. may seem like chapter covers tools performing task already familiar , tidyverse follows different philosophy traditional R, lot advantages including better code readability efficiency. , install load package, simply run code . Remember, need call install.packages , download required files CRAN. library needs called every time start new R session attach library functions working environment.","code":"\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)"},{"path":"dplyr.html","id":"reading-the-data","chapter":"6 Data Manipulation","heading":"Reading the data","text":"chapter, use dataset ’ve used exploratory analysis chapter, presents individual-level information sample students. However, tidyverse offers improved set functions reading data, part readr subpackage - work fairly similar read.csv introduced , however advantages (example read character columns character vectors, rather factors without include stringsAsFactors argument, discussed chapter 3. readr reading functions start read_ used different file types. usual one read_csv (can use exactly way read.csv), however case use read_delim, allows us read file delimiter. case math dataset row separated semicolon (can check opening file via notebook app). specify second delim argument example :can see, running function returns message, shows specification column read - col_character refers character columns, col_double() means numeric columns. force column read specific type. example, may want character column read factors cases - example sex. mentioned , default setting read_ functions read numbers numeric variables text character variables.read sex column factor, can read data , time specifying col_types argument. col_types argument takes list input, specify type selected columns, example sex = col_factor() tell:may wonder simply use .factor factor function:exactly equivalent, however previous way much explicit concise. Anyone (including ) reads analysis immedietaly know columns specified type.final facet readr package functions load data slightly different data type normal read.csvThe data comes loaded tibble (tbl short). Tibbles special kind data frames implemented tidyverse package - thing need know know, everything learned data frames far applies tibbles. offer improvements, discussed .","code":"\nmath <- read_delim(\"data/student/student-mat-data.csv\", delim = \";\")Rows: 395 Columns: 33\n── Column specification ─────────────────────────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (17): school, sex, address, famsize, Pstatus, Mjob, Fjob, reason, guardian, schoolsup, famsup...\ndbl (16): age, Medu, Fedu, traveltime, studytime, failures, famrel, freetime, goout, Dalc, Walc, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nclass(math$sex)[1] \"character\"\nmath <- read_delim(\"data/student/student-mat-data.csv\", delim = \";\",\n                 col_types = list(sex = col_factor(levels = c(\"M\",\"F\"))))\nclass(math$sex)[1] \"factor\"\nmath$sex <- factor(math$sex, levels = c(\"M\",\"F\"))\nmath <- read.csv(\"data/student/student-mat-data.csv\", sep = \";\")\nclass(math)[1] \"data.frame\"\nmath <- read_delim(\"data/student/student-mat-data.csv\", delim = \";\",\n                 col_types = list(sex = col_factor(levels = c(\"M\",\"F\"))))\nclass(math)[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \nis_tibble(math)[1] TRUE\nis.data.frame(math)[1] TRUE"},{"path":"dplyr.html","id":"the-pipe-operator","chapter":"6 Data Manipulation","heading":"The pipe operator","text":"Perhaps imporant innovation offered tidyverse package -called pipe operator %>%. use may feel bit quirky first, extremely useful widely used modern R users.learned -far, R evaluates function inside . example, can get sum missing values data frame running:essentially performs two steps - first, runs .na math data frame, returns table filled logical values, FALSE given entry missing TRUE . sum takes table input adds values (treating FALSE 0 TRUE 1). many cases, statements can get long, difficult read error-prone, especially keyword arguments specified.operation may done using pipe operator. case, rather evaluating sequence functions within, evaluated left right. %>% operator can understood way _passing output thing left thing right first argument:example, math data frame passed .na function, output passed sum function, returns exactly result. case regular call, may store output variable:continuing drop missing observations:may feel slightly unintuitive case, comes handy performing long sequences operations data, see following sections.","code":"\nsum(is.na(math))[1] 10\nmath %>% is.na() %>% sum()[1] 10\nnumber_missing <- math %>% is.na() %>% sum()\nnumber_missing[1] 10\nmath <- math[complete.cases(math), ]"},{"path":"dplyr.html","id":"dataset-manipulation","chapter":"6 Data Manipulation","heading":"Dataset manipulation","text":"Three key functions commonly used dataset manipulation tidyverse package: mutate, select filter, coming dplyr sub-package. used follows:\n- mutate used modify create columns data frames\n- select used select columns name\n- filter used select rows given set logical valuesAll three functions take data frame first argument. example, can create new column, grade_average adding together grades three years dividing 3:, equivalent :operations create variable called average adding G1, G2 G3 toegether, dividing three. however, case mutate ’s need specify $ opearator, pass math data frame first arguments, function knows G1, G2 G3 names refer particular data frame. mutate function returns data frame, additional column average. commonly, used pipe operator:case, %>% pass math data frame mutate, creates new column returns updated data.frame, stored math.filter allows filter rows data frame, operation similar indexing. example, can get students average grade higher 10 :entire operation done one step, :Note time haven’t modified data frame - variable average created temporarily, can use filter.query shows bit many columns. Suppose wanted narrow search see guardian students average higher 18. use select function, simply selects column data frame name:leaves us data frame one column, showing guardians students best marks.","code":"\nmath <- mutate(math, average = (G1 + G2 + G3)/3)\nmath$average <- (math$G1 + math$G2 + math$G3)/3\nmath <- math %>% mutate(average = (G1 + G2 + G3)/3)\nmath %>% filter(average > 18)# A tibble: 6 × 34\n  school sex     age address famsize Pstatus  Medu  Fedu Mjob     Fjob     reason guardian traveltime\n  <chr>  <fct> <dbl> <chr>   <chr>   <chr>   <dbl> <dbl> <chr>    <chr>    <chr>  <chr>         <dbl>\n1 GP     M        15 U       GT3     T           4     4 services teacher  course father            1\n2 GP     M        16 U       GT3     T           4     3 health   services reput… mother            1\n3 GP     M        15 U       LE3     A           4     4 teacher  teacher  course mother            1\n4 GP     M        15 U       LE3     T           4     2 teacher  other    course mother            1\n5 GP     F        18 U       GT3     T           2     2 at_home  at_home  other  mother            1\n6 MS     F        18 R       LE3     T           4     4 other    other    reput… mother            2\n# ℹ 21 more variables: studytime <dbl>, failures <dbl>, schoolsup <chr>, famsup <chr>, paid <chr>,\n#   activities <chr>, nursery <chr>, higher <chr>, internet <chr>, romantic <chr>, famrel <dbl>,\n#   freetime <dbl>, goout <dbl>, Dalc <dbl>, Walc <dbl>, health <dbl>, absences <dbl>, G1 <dbl>,\n#   G2 <dbl>, G3 <dbl>, average <dbl>\nmath %>%\n  mutate(average = (G1 + G2 + G3)/3) %>%\n  filter(average > 18)# A tibble: 6 × 34\n  school sex     age address famsize Pstatus  Medu  Fedu Mjob     Fjob     reason guardian traveltime\n  <chr>  <fct> <dbl> <chr>   <chr>   <chr>   <dbl> <dbl> <chr>    <chr>    <chr>  <chr>         <dbl>\n1 GP     M        15 U       GT3     T           4     4 services teacher  course father            1\n2 GP     M        16 U       GT3     T           4     3 health   services reput… mother            1\n3 GP     M        15 U       LE3     A           4     4 teacher  teacher  course mother            1\n4 GP     M        15 U       LE3     T           4     2 teacher  other    course mother            1\n5 GP     F        18 U       GT3     T           2     2 at_home  at_home  other  mother            1\n6 MS     F        18 R       LE3     T           4     4 other    other    reput… mother            2\n# ℹ 21 more variables: studytime <dbl>, failures <dbl>, schoolsup <chr>, famsup <chr>, paid <chr>,\n#   activities <chr>, nursery <chr>, higher <chr>, internet <chr>, romantic <chr>, famrel <dbl>,\n#   freetime <dbl>, goout <dbl>, Dalc <dbl>, Walc <dbl>, health <dbl>, absences <dbl>, G1 <dbl>,\n#   G2 <dbl>, G3 <dbl>, average <dbl>\nmath %>%\n  mutate(average = (G1 + G2 + G3)/3) %>%\n  filter(average > 18) %>%\n  select(guardian)# A tibble: 6 × 1\n  guardian\n  <chr>   \n1 father  \n2 mother  \n3 mother  \n4 mother  \n5 mother  \n6 mother  "},{"path":"dplyr.html","id":"reshaping-data","chapter":"6 Data Manipulation","heading":"Reshaping data","text":"’s common social scientific longitudinal nature. means, data given unit observation (example country, household individual) observed multiple variable (example GDP, income, well-) period time. data can come two formats - long wide.Wide data format - wide data format, column represents variable - example, table presented presents grades three students three academic years wide format. column represents separate year.Long data format - long data format, separate column represents name variable separate one - value corresponding variable. format sometimes useful particular types analysis panel data models visualization. can see student scores long format :can see example data loading dataset gdp.csv, contains GDP per capita several years couple European countries:can see data contains country names, well GDP values years 2000 2015 wide format. reshape data long format, can use pivot_longer function, comes tidyr package, another element tidyverse suite. pivot longer, specify dataset name first argument (usually piped function), followed column names contain wide-format variables (assuming order, can specified names left-right-variable, separated colon). Note example, also use inverse quotation marks, since variable named using numbers. names_to argument specifies tha name variable used store names re-formatted variables (example - years) value_to argument specifies name variable used store values (GDP per capita).can see, function produces data long format, 4 columns, 140 rows, opposed wide data consists 7 rows, 22 columns.cases, data might come long format, yet might want reshape long. can done using pivot_wider function. works exactly opposite pivot_longer. first specify data piping function use names_from argument specify name variable containing variable names value_from specify variable containing values. end obtaining data frame started .","code":"\ngdp <- read_csv(\"data/world_bank/gdp.csv\")\nhead(gdp)# A tibble: 6 × 23\n  country   ccode `2000` `2001` `2002` `2003` `2004` `2005` `2006` `2007` `2008` `2009` `2010` `2011`\n  <chr>     <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Germany   DEU   27209. 28381. 29179. 29875. 31305. 31794. 34119. 36250. 37802. 36851. 38979. 42542.\n2 Denmark   DNK   28669. 29450. 30640. 30787. 32909. 34150. 37289. 38966. 41278. 40370. 43032. 44403.\n3 Spain     ESP   21592. 22959. 24372. 25019. 26120. 27607. 30683. 32436. 33263. 32123. 31704. 31868.\n4 France    FRA   26100. 27502. 28524. 28142. 29034. 30499. 32429. 34086. 35095. 34711. 35927. 37441.\n5 United K… GBR   26413. 27757. 29069. 30262. 31965. 32668. 34761. 35597. 36660. 35030. 36368. 37162.\n6 Greece    GRC   19524. 20964. 22616. 23871. 25437. 25578. 28515. 29290. 30856. 30388. 28169. 26141.\n# ℹ 9 more variables: `2012` <dbl>, `2013` <dbl>, `2014` <dbl>, `2015` <dbl>, `2016` <dbl>,\n#   `2017` <dbl>, `2018` <dbl>, `2019` <dbl>, X65 <lgl>\ngdp_long <- gdp %>% pivot_longer(`2000`:`2019`, \n                                 names_to = \"year\", values_to = \"gdp_pc\")\nhead(gdp_long)# A tibble: 6 × 5\n  country ccode X65   year  gdp_pc\n  <chr>   <chr> <lgl> <chr>  <dbl>\n1 Germany DEU   NA    2000  27209.\n2 Germany DEU   NA    2001  28381.\n3 Germany DEU   NA    2002  29179.\n4 Germany DEU   NA    2003  29875.\n5 Germany DEU   NA    2004  31305.\n6 Germany DEU   NA    2005  31794.\ngdp_wide <- gdp_long %>% pivot_wider(names_from = \"year\", values_from = \"gdp_pc\")\nhead(gdp_wide)# A tibble: 6 × 23\n  country    ccode X65   `2000` `2001` `2002` `2003` `2004` `2005` `2006` `2007` `2008` `2009` `2010`\n  <chr>      <chr> <lgl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Germany    DEU   NA    27209. 28381. 29179. 29875. 31305. 31794. 34119. 36250. 37802. 36851. 38979.\n2 Denmark    DNK   NA    28669. 29450. 30640. 30787. 32909. 34150. 37289. 38966. 41278. 40370. 43032.\n3 Spain      ESP   NA    21592. 22959. 24372. 25019. 26120. 27607. 30683. 32436. 33263. 32123. 31704.\n4 France     FRA   NA    26100. 27502. 28524. 28142. 29034. 30499. 32429. 34086. 35095. 34711. 35927.\n5 United Ki… GBR   NA    26413. 27757. 29069. 30262. 31965. 32668. 34761. 35597. 36660. 35030. 36368.\n6 Greece     GRC   NA    19524. 20964. 22616. 23871. 25437. 25578. 28515. 29290. 30856. 30388. 28169.\n# ℹ 9 more variables: `2011` <dbl>, `2012` <dbl>, `2013` <dbl>, `2014` <dbl>, `2015` <dbl>,\n#   `2016` <dbl>, `2017` <dbl>, `2018` <dbl>, `2019` <dbl>\nall.equal(gdp_wide, gdp) [1] \"Names: 21 string mismatches\"                                                           \n [2] \"Attributes: < Names: 1 string mismatch >\"                                              \n [3] \"Attributes: < Length mismatch: comparison on first 2 components >\"                     \n [4] \"Attributes: < Component \\\"class\\\": Lengths (3, 4) differ (string compare on first 3) >\"\n [5] \"Attributes: < Component \\\"class\\\": 3 string mismatches >\"                              \n [6] \"Attributes: < Component 2: Modes: numeric, externalptr >\"                              \n [7] \"Attributes: < Component 2: Lengths: 7, 1 >\"                                            \n [8] \"Attributes: < Component 2: target is numeric, current is externalptr >\"                \n [9] \"Component 3: Modes: logical, numeric\"                                                  \n[10] \"Component 3: target is logical, current is numeric\"                                    \n[11] \"Component 4: Mean relative difference: 0.04964384\"                                     \n[12] \"Component 5: Mean relative difference: 0.04797772\"                                     \n[13] \"Component 6: Mean relative difference: 0.02722602\"                                     \n[14] \"Component 7: Mean relative difference: 0.05492863\"                                     \n[15] \"Component 8: Mean relative difference: 0.03197982\"                                     \n[16] \"Component 9: Mean relative difference: 0.08535064\"                                     \n[17] \"Component 10: Mean relative difference: 0.04919092\"                                    \n[18] \"Component 11: Mean relative difference: 0.04411082\"                                    \n[19] \"Component 12: Mean relative difference: 0.02757141\"                                    \n[20] \"Component 13: Mean relative difference: 0.05151733\"                                    \n[21] \"Component 14: Mean relative difference: 0.04769779\"                                    \n[22] \"Component 15: Mean relative difference: 0.01895478\"                                    \n[23] \"Component 16: Mean relative difference: 0.03867191\"                                    \n[24] \"Component 17: Mean relative difference: 0.03078083\"                                    \n[25] \"Component 18: Mean relative difference: 0.02475497\"                                    \n[26] \"Component 19: Mean relative difference: 0.05288349\"                                    \n[27] \"Component 20: Mean relative difference: 0.05189977\"                                    \n[28] \"Component 21: Mean relative difference: 0.03430557\"                                    \n[29] \"Component 22: Mean relative difference: 0.04530826\"                                    \n[30] \"Component 23: Modes: numeric, logical\"                                                 \n[31] \"Component 23: target is numeric, current is logical\"                                   "},{"path":"dplyr.html","id":"joining","chapter":"6 Data Manipulation","heading":"Joining","text":"final data manipulation technique discuss chapter joining. many cases dataset coming two separate file, containing different variables unit observations. case data coming World Bank Open Data, information indicator comes separate csv file. example, suppose data GDP population density countries:Suppose want analyze relationship population density gdp per capita. , convenient merge two datasets one, containing variables gdp pop_dens. can achieve using joins.First, pivot data long format:Note countries two datasets different:join two data frames, need ID variable (set variables) identify observations allow us join . example, country year variables perfect candidate, since corresponds one observation given country given period. say join two datasets country year. sThere three fundamental ways can approach :Inner join used join observations variables joining appear datasets. rows identifying variables don’t match observations dataset dropped resulting dataset. join used care primarily completeness data. order dataframes matter performing inner join.can see new dataframe dat contains gdp_pc pop_dens variables. Furthermore, countries present datasets kept:Left join used join observations variables joining appear first dataset (one left joining function). done primarily care keeping observations first (left) dataset. observations corresponding identifying values found turned missing values:can see example, resulting dataset contains missing values countries present pop_long dataset. countries gdp_long dataset kept:Full join - joining observations data frames producing missing values whenever ’s observation missing one .result full_join, countries including either datasets kept:joining techniques, Filtering joins (semi_join anti_join), well nest_join. can read documentation typing ?join console.","code":"\ngdp <- read_csv(\"data/world_bank/gdp.csv\")\npop <- read_csv(\"data/world_bank/pop_dens.csv\")\nhead(gdp)# A tibble: 6 × 23\n  country   ccode `2000` `2001` `2002` `2003` `2004` `2005` `2006` `2007` `2008` `2009` `2010` `2011`\n  <chr>     <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 Germany   DEU   27209. 28381. 29179. 29875. 31305. 31794. 34119. 36250. 37802. 36851. 38979. 42542.\n2 Denmark   DNK   28669. 29450. 30640. 30787. 32909. 34150. 37289. 38966. 41278. 40370. 43032. 44403.\n3 Spain     ESP   21592. 22959. 24372. 25019. 26120. 27607. 30683. 32436. 33263. 32123. 31704. 31868.\n4 France    FRA   26100. 27502. 28524. 28142. 29034. 30499. 32429. 34086. 35095. 34711. 35927. 37441.\n5 United K… GBR   26413. 27757. 29069. 30262. 31965. 32668. 34761. 35597. 36660. 35030. 36368. 37162.\n6 Greece    GRC   19524. 20964. 22616. 23871. 25437. 25578. 28515. 29290. 30856. 30388. 28169. 26141.\n# ℹ 9 more variables: `2012` <dbl>, `2013` <dbl>, `2014` <dbl>, `2015` <dbl>, `2016` <dbl>,\n#   `2017` <dbl>, `2018` <dbl>, `2019` <dbl>, X65 <lgl>\nhead(pop)# A tibble: 6 × 23\n  country   ccode `2000` `2001` `2002` `2003` `2004` `2005` `2006` `2007` `2008` `2009` `2010` `2011`\n  <chr>     <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 France    FRA    111.   112.   113.   114.   115.   115.   116.   117.   118.   118.   119.   119. \n2 United K… GBR    243.   244.   245.   247.   248.   250.   252.   253.   255.   257.   259.   261. \n3 Ireland   IRL     55.2   56.1   57.1   58.0   59.1   60.4   62.0   63.9   65.2   65.8   66.2   66.5\n4 Italy     ITA    194.   194.   194.   195.   196.   197.   198.   199.   200.   201.   202.   202. \n5 Poland    POL    125.   125.   125.   125.   125.   125.   125.   124.   124.   125.   124.   124. \n6 Portugal  PRT    112.   113.   114.   114.   115.   115.   115.   115.   115.   115.   115.   115. \n# ℹ 9 more variables: `2012` <dbl>, `2013` <dbl>, `2014` <dbl>, `2015` <dbl>, `2016` <dbl>,\n#   `2017` <dbl>, `2018` <dbl>, `2019` <lgl>, X65 <lgl>\ngdp_long <- gdp %>% pivot_longer(`2000`:`2019`, \n                                 names_to = \"year\", values_to = \"gdp_pc\")\npop_long <- pop %>% pivot_longer(`2000`:`2019`, \n                                 names_to = \"year\", values_to = \"pop_dens\")\nunique(gdp_long$country)[1] \"Germany\"        \"Denmark\"        \"Spain\"          \"France\"         \"United Kingdom\"\n[6] \"Greece\"         \"Poland\"        \nunique(pop_long$country)[1] \"France\"         \"United Kingdom\" \"Ireland\"        \"Italy\"          \"Poland\"        \n[6] \"Portugal\"      \nidentical(unique(gdp_long$country), unique(pop_long$country))[1] FALSE\ndat <- inner_join(gdp_long, pop_long, by = c(\"country\", \"ccode\", \"year\"))\nhead(dat)# A tibble: 6 × 7\n  country ccode X65.x year  gdp_pc X65.y pop_dens\n  <chr>   <chr> <lgl> <chr>  <dbl> <lgl>    <dbl>\n1 France  FRA   NA    2000  26100. NA        111.\n2 France  FRA   NA    2001  27502. NA        112.\n3 France  FRA   NA    2002  28524. NA        113.\n4 France  FRA   NA    2003  28142. NA        114.\n5 France  FRA   NA    2004  29034. NA        115.\n6 France  FRA   NA    2005  30499. NA        115.\nunique(dat$country)[1] \"France\"         \"United Kingdom\" \"Poland\"        \ndat <- left_join(gdp_long, pop_long, by = c(\"country\", \"ccode\", \"year\"))\nhead(dat)# A tibble: 6 × 7\n  country ccode X65.x year  gdp_pc X65.y pop_dens\n  <chr>   <chr> <lgl> <chr>  <dbl> <lgl>    <dbl>\n1 Germany DEU   NA    2000  27209. NA          NA\n2 Germany DEU   NA    2001  28381. NA          NA\n3 Germany DEU   NA    2002  29179. NA          NA\n4 Germany DEU   NA    2003  29875. NA          NA\n5 Germany DEU   NA    2004  31305. NA          NA\n6 Germany DEU   NA    2005  31794. NA          NA\nall.equal(unique(gdp_long$country), unique(dat$country))[1] TRUE\ndat <- full_join(gdp_long, pop_long, by = c(\"country\", \"ccode\", \"year\"))\nhead(dat)# A tibble: 6 × 7\n  country ccode X65.x year  gdp_pc X65.y pop_dens\n  <chr>   <chr> <lgl> <chr>  <dbl> <lgl>    <dbl>\n1 Germany DEU   NA    2000  27209. NA          NA\n2 Germany DEU   NA    2001  28381. NA          NA\n3 Germany DEU   NA    2002  29179. NA          NA\n4 Germany DEU   NA    2003  29875. NA          NA\n5 Germany DEU   NA    2004  31305. NA          NA\n6 Germany DEU   NA    2005  31794. NA          NA\nunique(c(dat$country)) [1] \"Germany\"        \"Denmark\"        \"Spain\"          \"France\"         \"United Kingdom\"\n [6] \"Greece\"         \"Poland\"         \"Ireland\"        \"Italy\"          \"Portugal\"      \nunique(c(gdp_long$country, pop_long$country)) [1] \"Germany\"        \"Denmark\"        \"Spain\"          \"France\"         \"United Kingdom\"\n [6] \"Greece\"         \"Poland\"         \"Ireland\"        \"Italy\"          \"Portugal\"      "},{"path":"dplyr.html","id":"aggregating-data","chapter":"6 Data Manipulation","heading":"Aggregating data","text":"discussed summary statistics can used summarize data, ’s often useful compare values across group, rather look one number describe entire dataset. tidyverse allows us calculate summary statistics variables summarise function. example, get average GDP countries data:different using gdp_long$gdp_pc %>% mean(), returns tibble rather scalar value. However, summarize function powerful conjunction group_by function. name suggests, group_by function divides data frame groups using one variables. surface, doesn’t appear alter much:Similarily, compare country’s average, maximum minimum GDP growth past years:case, first group data frame country. use mutate compute gdp_growth subtracting GDP one year (calculated using lag function) dividing difference lagged GDP. Note mutate function also applies computation according grouping defined group_by - lag() computed within country. use summarise apply functions. Finally, use arrange sort output according negative value average GDP growth, .e. decreasing order.Since behaviour group_by affects many operations performed dataframe, important call ungroup() end operations assign data frame new name - performing operations groupped tibbles can lead suprising results. Coming back example, suppose wanted obtain deviation country’s GDP growth global mean growth. First, obtain growths:can see using .equal function, resulting variables different. , tibble still groupped, mutate(growth_dem = gdp_growth - mean(gdp_growth, na.rm = TRUE)) expression subtracts group mean observation, wheres ’s ungrouped, calculates global mean subtracts . may seem trivial example, forgetting ungroup tibble common error crucial remeber ungroup tibble finishing performing operations . Also note calling group_by() already groupped tibble discards previous groupping applies new one instead.","code":"\ngdp_long %>% summarise(gdp_avg = mean(gdp_pc))# A tibble: 1 × 1\n  gdp_avg\n    <dbl>\n1  33486.\ngdp_long_groupped <- gdp_long %>% group_by(country)\ngdp_long_groupped# A tibble: 140 × 5\n# Groups:   country [7]\n   country ccode X65   year  gdp_pc\n   <chr>   <chr> <lgl> <chr>  <dbl>\n 1 Germany DEU   NA    2000  27209.\n 2 Germany DEU   NA    2001  28381.\n 3 Germany DEU   NA    2002  29179.\n 4 Germany DEU   NA    2003  29875.\n 5 Germany DEU   NA    2004  31305.\n 6 Germany DEU   NA    2005  31794.\n 7 Germany DEU   NA    2006  34119.\n 8 Germany DEU   NA    2007  36250.\n 9 Germany DEU   NA    2008  37802.\n10 Germany DEU   NA    2009  36851.\n# ℹ 130 more rows\npop_long %>%\n  group_by(country) %>%\n  summarise(avg_pop = mean(pop_dens, na.rm = TRUE), \n            sd_pop = sd(pop_dens, na.rm = TRUE))# A tibble: 6 × 3\n  country        avg_pop sd_pop\n  <chr>            <dbl>  <dbl>\n1 France           118.   3.60 \n2 Ireland           63.9  4.89 \n3 Italy            200.   4.67 \n4 Poland           124.   0.301\n5 Portugal         114.   1.13 \n6 United Kingdom   258.  10.3  \ngdp_long %>% \n  group_by(country) %>%\n  mutate(gdp_growth = (gdp_pc - lag(gdp_pc)) / lag(gdp_pc)) %>%\n  summarise(avg_growth = mean(gdp_growth, na.rm = TRUE), \n            max_growth = max(gdp_growth, na.rm = TRUE), \n            min_growth = min(gdp_growth, na.rm = TRUE)) %>%\n  arrange(-avg_growth)# A tibble: 7 × 4\n  country        avg_growth max_growth min_growth\n  <chr>               <dbl>      <dbl>      <dbl>\n1 Poland             0.0636     0.109      0.0361\n2 Denmark            0.0398     0.0919    -0.0220\n3 Germany            0.0391     0.0914    -0.0252\n4 Spain              0.0364     0.111     -0.0343\n5 France             0.0344     0.0633    -0.0134\n6 United Kingdom     0.0330     0.0641    -0.0445\n7 Greece             0.0264     0.115     -0.0730\ngdp_growths <- gdp_long %>% \n                group_by(country) %>%\n                mutate(gdp_growth = (gdp_pc - lag(gdp_pc)) / lag(gdp_pc))\n\n#store demeaned values:\ndem <- gdp_growths %>% \n  mutate(growth_dem = gdp_growth - mean(gdp_growth, na.rm = TRUE))\n\n#stored demeaned values calculated after ungrouping\ndem_ungr <- gdp_growths %>% \n  ungroup() %>%\n  mutate(growth_dem = gdp_growth - mean(gdp_growth, na.rm = TRUE))\n\nall.equal(dem$growth_dem, dem_ungr$growth_dem)[1] \"Mean relative difference: 0.3395083\""},{"path":"dplyr.html","id":"summary-4","chapter":"6 Data Manipulation","heading":"6.2 Summary","text":"tidyverse package set tools data manipulation commonly used R.readr offers convenient inferface reading data R explicitly specifying column classes functions read_csv, read_delim read_tsv.tibble special kind data frame implemented tidyverse package. offers new functionalities, working tibbles similar working traditional R data frames.pipe operator %>% passess values functions - instead evaluating expressions inside-, evaluated left right.select used select columns data frame based namesfilter used filter rows data frame based logical statementmutate used modify values existing columns create new columns data frameData can often come long wide format. can use pivot_longer pivot_wider switch data formats.can merge two data frames common column (set columns) using dplyr’s join functions. Depending way want treat non-matching records, may use left_join, inner_join full_joinYou can aggregate data using summary function. works best group_by, allows get statistics group, following group defined variable set variables. call ungroup() tibble, avoid errors.","code":""},{"path":"dplyr.html","id":"functions-list-4","chapter":"6 Data Manipulation","heading":"Functions list","text":"","code":""},{"path":"dplyr.html","id":"exercises-4","chapter":"6 Data Manipulation","heading":"6.3 Exercises","text":"Select true statements joins correct false statements:. Full join always produce dataframe rows inner join.\nB. Inner join never produce new missing values.\nC. Full join always produce least many rows left join.\nD. Left join used want ensure observations left data frame always matched non-missing element right data frame.remaining exercises use student data, consists three .csv files: math.csv, contains grades achieved student years long format, port.csv, data portugeese classes info.csv, contains demographic variables.Load math port data R. Specify id variable character column.Load math port data R. Specify id variable character column.Load info data R join grades datasets. Make sure keep records students reported grades portugeese math. Use suffix argument join function specify names duplicated variable names (G1, G2 G3) _por portugeese grades _mat math grades.Load info data R join grades datasets. Make sure keep records students reported grades portugeese math. Use suffix argument join function specify names duplicated variable names (G1, G2 G3) _por portugeese grades _mat math grades.Create vector called port_missing contains student IDs present math dataset missing port dataset.Create vector called port_missing contains student IDs present math dataset missing port dataset.Compare average performance Portugeese Math third year schools:Compare average performance Portugeese Math third year schools:student grades improve average subject? improvement better one school ? (HINT: might want data long format use lag function used end chapter. Store data new tibble called students_imp, useful next exercises).student grades improve average subject? improvement better one school ? (HINT: might want data long format use lag function used end chapter. Store data new tibble called students_imp, useful next exercises).grade improvements vary across schools?grade improvements vary across schools?form support - famsup schoolsup lead higher average improvement students’ grades subject?form support - famsup schoolsup lead higher average improvement students’ grades subject?two schools seem effective rising average grade school support?two schools seem effective rising average grade school support?solutions exercises available 2021-01-07.","code":""}]
